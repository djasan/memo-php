Les tableaux sont des structures capables de conserver en mÃ©moire plusieurs Ã©lÃ©ments. Et c'est ensuite grÃ¢ce aux boucles que nous allons pouvoir :

    Parcourir les diffÃ©rentes recettes.

    Les afficher Ã  l'aide du langage HTML.

Nous reviendrons sur les tableaux en dÃ©tail dans le chapitre suivant, c'est l'un des Ã©lÃ©ments les plus utiles de PHP et je n'ai pas souvenir d'une seule de mes applications qui n'ait pas eu besoin de tableau.

Ã€ la fin de ce chapitre, non seulement vous saurez parcourir une liste d'Ã©lÃ©ments, mais vous aurez Ã©galement commencÃ© Ã  construire pour de bon votre application.
Utilisez un tableau pour lister des Ã©lÃ©ments

Reprenons notre projet lÃ  oÃ¹ nous l'avions laissÃ© au chapitre prÃ©cÃ©dent.

Nous avons :

    des utilisateurs ;

    des recettes ;

    et peut-Ãªtre des commentaires.

Avec les connaissances que vous avez pour le moment, voici comment vous pourriez dÃ©finir deux utilisateurs :

<?php


// Premier utilisateur

$userName1 = 'MickaÃ«l Andrieu';

$userEmail1 = 'mickael.andrieu@exemple.com';

$userPassword1 = 'S3cr3t';

$userAge1 = 34;


// DeuxiÃ¨me utilisatrice

$userName2 = 'LaurÃ¨ne Castor';

$userEmail2 = 'laurene.castor@exemple.com';

$userPassword2 = 'P4ssW0rD';

$userAge2 = 28;


// ... et ainsi de suite pour les autres utilisateurs.

Pour afficher ces utilisateurs (ou mÃªme des recettes), je vais devoir crÃ©er des variables pour chacun des Ã©lÃ©ments qui constituent mes objets ?

Non, heureusement !

En PHP, il existe un type de structure appelÃ©e "tableau". Elle permet de gÃ©rer des objets ayant plusieurs propriÃ©tÃ©s qui ont besoin d'Ãªtre rassemblÃ©es entre elles.

Par exemple, voici un premier tableau :

<?php


$user1 = ['MickaÃ«l Andrieu', 'email', 'S3cr3t', 34];


echo $user1[0]; // "MickaÃ«l Andrieu"

echo $user1[1]; // "email"

echo $user1[3]; // 34

Notez pour le moment que :

    un tableau se dÃ©clare entre crochets : [ ] ;

    il possÃ¨de des indices : 0, 1, 2, â€¦ ;

    on peut accÃ©der Ã  un Ã©lÃ©ment du tableau Ã  partir de ces clÃ©s.

Les indices d'un tableau commencent Ã  0, et pas Ã  1.

Mais la puissance des tableaux ne s'arrÃªte pas lÃ  !

Vous pouvez construire des tableaux de tableaux :

<?php


$mickael = ['MickaÃ«l Andrieu', 'mickael.andrieu@exemple.com', 'S3cr3t', 34];

$mathieu = ['Mathieu Nebra', 'mathieu.nebra@exemple.com', 'devine', 33];

$laurene = ['LaurÃ¨ne Castor', 'laurene.castor@exemple.com', 'P4ssw0rD', 28];


$users = [$mickael, $mathieu, $laurene];


echo $users[1][1]; // "mathieu.nebra@exemple.com"

Maintenant, comment boucler sur cette liste d'utilisateurs (ou de recettes) pour afficher les recettes ?

C'est exactement ce que nous allons voir maintenant !
Utilisez une boucle simple :  while

Attendez mais on n'a mÃªme pas vu ce qu'Ã©tait une boucle, Ã  quoi Ã§a sert ?

C'est une structure qui fonctionne sur le mÃªme principe qu'une condition  ifâ€¦ else  .

D'ailleurs, vous allez voir qu'il y a beaucoup de similitudes avec le chapitre sur les conditions.

ConcrÃ¨tement, une boucle permet de rÃ©pÃ©ter des instructions plusieurs fois. En clair : c'est un gain de temps, c'est trÃ¨s pratique, et bien souvent indispensable.

On peut, si vous voulez, prÃ©senter le principe avec le schÃ©ma suivant :
Le schÃ©ma montre le fonctionnement d'une boucle : les instructions sont exÃ©cutÃ©es dans l'ordre, de haut en bas. Ã€ la fin, on retourne Ã  la premiÃ¨re et on recommence.
Principe de fonctionnement d'une boucle

VoilÃ  ce qui se passe dans une boucle :

    Comme d'habitude, les instructions sont d'abord exÃ©cutÃ©es dans l'ordre, de haut en bas.

    Ã€ la fin des instructions, on retourne Ã  la premiÃ¨re.

    On recommence Ã  lire les instructions dans l'ordre.

    Et on retourne Ã  la premiÃ¨re, etc.

Le seul hic dans ce schÃ©ma, c'est que Ã§a ne s'arrÃªte jamais ! Les instructions seraient rÃ©exÃ©cutÃ©es Ã  l'infini !
C'est pour cela que, quel que soit le type de boucle, while  ou for, il faut indiquer une condition.

Tant que la condition est remplie, les instructions sont rÃ©exÃ©cutÃ©es.

DÃ¨s que la condition n'est plus remplie, on sort enfin de la boucle. Ouf !

Voici comment faire avec une boucle simple :  while  . 

<?php

while ($isValid) {

    // instructions Ã  exÃ©cuter dans la boucle

}

?>

while  peut se traduire par Â« tant que Â».

Ici, on demande Ã  PHP :

    TANT QUE $isValid est vrai, exÃ©cuter ces instructions.

Les instructions qui sont rÃ©pÃ©tÃ©es en boucle se trouvent entre les accolades {  et  }  .

Mais bon, lÃ  je ne vous apprends rien, vous commencez Ã  avoir l'habitude de voir des accolades partout. ğŸ¤“

Et voilÃ , il n'y a guÃ¨re plus de choses Ã  savoir. Cependant, je vais quand mÃªme vous montrer un ou deux exemples d'utilisation de boucles, pour que vous voyiez Ã  quoi Ã§a peut servir.

Pour notre premier exemple, on va supposer que vous avez Ã©tÃ© puni et que vous devez recopier 100 fois :

    Â« Je ne dois pas regarder les mouches voler quand j'apprends le PHP Â».

Avant, il fallait prendre son mal en patience et Ã§a prenait des heuresâ€¦ Avec PHP, on va faire Ã§a en un clin d'Å“il !

Regardez ce code :

<?php

$lines = 1;


while ($lines <= 100) {

    echo 'Je ne dois pas regarder les mouches voler quand j\'apprends le PHP.<br />';

    $lines++; // $lines = $lines + 1

}

?>

Ce qui affiche... un grand nombre de lignes :
Capture d'Ã©cran des lignes affichÃ©es grÃ¢ce Ã  une boucle PHP. On peut lire la phrase
Des lignes affichÃ©es grÃ¢ce Ã  une boucle PHP

La boucle pose la condition :

    TANT QUE $lines est infÃ©rieur ou Ã©gal Ã  100.

Dans cette boucle, il y a deux instructions :

    echo permet d'afficher du texte en PHP. Ã€ noter qu'il y a une balise HTML <br />  Ã  la fin : cela permet d'aller Ã  la ligne (vu que vous connaissez le HTML, Ã§a n'a rien de surprenant : chaque phrase sera Ã©crite sur une seule ligne).

    $lines++; est une faÃ§on plus courte d'ajouter 1 Ã  la variable. On appelle cela l'incrÃ©mentation (ce nom barbare signifie tout simplement que l'on a ajoutÃ© 1 Ã  la variable).

Chaque fois qu'on fait une boucle, la valeur de la variable augmente : 1, 2, 3, 4â€¦ 99, 100â€¦

DÃ¨s que la variable atteint 101, on arrÃªte la boucle.

Et voilÃ , on a Ã©crit 100 lignes en un clin d'Å“il.

Si la punition avait Ã©tÃ© plus grosse, pas de problÃ¨me ! Il aurait suffi de changer la condition, par exemple : mettre Â« TANT QUE c'est infÃ©rieur ou Ã©gal Ã  500 Â» pour l'Ã©crire 500 fois.

Il faut toujours s'assurer que la condition sera fausse au moins une fois. Si elle ne l'est jamais, alors la boucle s'exÃ©cutera Ã  l'infini !

PHP refuse normalement de travailler plus d'une quinzaine de secondes. Il s'arrÃªtera tout seul s'il voit que son travail dure trop longtemps, et affichera un message d'erreur.

Nous venons donc de voir comment afficher une phrase plusieurs centaines de fois sans effort.

Mais est-ce vraiment utile ? On n'a pas besoin de faire Ã§a sur un site web, si ?

Pas vraiment, mais nous apprenons ici des techniques de base que l'on va pouvoir rÃ©utiliser plus tard dans ce cours. Imaginez Ã  la fin que ce systÃ¨me de boucle va vous permettre de demander Ã  PHP d'afficher d'une seule traite tous les messages de votre forum. Bien sÃ»r, il vous faudra d'autres connaissances pour y parvenir, mais sans les boucles vous n'auriez rien pu faire !

Je vous demande pour le moment de pratiquer et de comprendre comment Ã§a marche.

Bon, un autre exemple pour le plaisir ?

On peut Ã©crire de la mÃªme maniÃ¨re une centaine de lignes, mais chacune peut Ãªtre diffÃ©rente : on n'est pas obligÃ© d'Ã©crire la mÃªme chose Ã  chaque fois.

Cet exemple devrait vous montrer que la valeur de la variable augmente Ã  chaque passage dans la boucle :

<?php

$lines = 1;


while ($lines <= 100)

{

    echo 'Ceci est la ligne nÂ°' . $lines . '<br />';

    $lines++;

}

?>


<!--


Ceci est la ligne nÂ°1

Ceci est la ligne nÂ°2

...

-->

VoilÃ , c'est tout bÃªte, et cet exemple ressemble beaucoup au prÃ©cÃ©dent.

La particularitÃ©, lÃ , c'est qu'on affiche Ã  chaque fois la valeur de  $lines  .

Cela vous permet de voir que sa valeur augmente petit Ã  petit.

Pour information, l'astuce que je vous avais donnÃ©e dans le chapitre sur les conditions marche aussi ici :

    Vous pouvez fermer la balise PHP  ?>  .

    Ã‰crire du texte en HTML.

    Puis rouvrir la balise PHP  <?php  .

Cela vous Ã©vite d'utiliser une ou plusieurs instructions echo au milieu.

On aura l'occasion d'utiliser cette astuce de nombreuses fois dans la suite du cours.

D'accord, mais pour un tableau de tableaux : comment on fait alors ?

On va l'aborder en dÃ©tail dans le chapitre suivant ; en attendant, voici le code fonctionnel :

<?php


$lines = 3; // nombre d'utilisateurs dans le tableau

$counter = 0;


while ($counter < $lines) {

    echo $users[$counter][0] . ' ' . $users[$counter][1] . '<br />';

    $counter++; // Ne surtout pas oublier la condition de sortie !

}

Pour le rÃ©sultat suivant :
On voit la liste des utilisateurs et leurs emails avec une boucle while : MickaÃ«l Andrieu, Mathieu Nebra et LaurÃ¨ne Castor
Liste des utilisateurs avec une boucle while
DÃ©couvrez une boucle plus complexe :  for

Mais non, n'ayez pas peur, voyons.
Il ne vous arrivera rien de mal : ici le mot Â« complexe Â» ne veut pas dire Â« compliquÃ© Â».

for est un autre type de boucle qui a une forme un peu plus condensÃ©e et plus commode Ã  Ã©crire. Elle est donc frÃ©quemment utilisÃ©e.

Cependant, sachez que for  et while  donnent le mÃªme rÃ©sultat et servent Ã  la mÃªme chose : rÃ©pÃ©ter des instructions en boucle.

L'une peut paraÃ®tre plus adaptÃ©e que l'autre dans certains cas ; cela dÃ©pend aussi des goÃ»ts.

Alors, comment Ã§a marche un for ?

Ã‡a ressemble beaucoup au while mais c'est la premiÃ¨re ligne qui est un peu particuliÃ¨re.

Pour voir la diffÃ©rence avec le while , reprenons l'exemple prÃ©cÃ©dent, cette fois avec un for :

<?php

for ($lines = 0; $lines <= 2; $lines++)

{

    echo $users[$lines][0] . ' ' . $users[$lines][1] . '<br />';

}

?>

Que de choses dans une mÃªme ligne !

Bon, vous vous en doutez : je vais vous analyser la ligne du for uniquement (le reste n'a pas changÃ©).

AprÃ¨s le mot for  , il y a des parenthÃ¨ses qui contiennent trois Ã©lÃ©ments, sÃ©parÃ©s par des points-virgules ;  :

    Le premier sert Ã  l'initialisation. C'est la valeur que l'on donne au dÃ©part Ã  la variable (ici, elle vaut 0).

    Le second, c'est la condition. Comme pour le while : tant que la condition est remplie, la boucle est rÃ©exÃ©cutÃ©e. DÃ¨s que la condition ne l'est plus, on en sort.

    Enfin, le troisiÃ¨me c'est l'incrÃ©mentation. Cela permet d'ajouter 1 Ã  la variable Ã  chaque tour de boucle.

Les deux derniers codes donnent donc exactement le mÃªme rÃ©sultat :

    le for fait la mÃªme chose que le  while  ;

    â€¦ mais il rassemble sur une seule ligne tout ce qu'il faut savoir sur le fonctionnement de la boucle.

Comment savoir lequel choisir ? while  ou for ?

while  est plus simple et plus flexible : on peut faire tous les types de boucles avec, mais on peut oublier de faire certaines Ã©tapes, comme l'incrÃ©mentation de la variable.

for  est bien adaptÃ© quand on doit compter le nombre de fois que l'on rÃ©pÃ¨te les instructions, et il permet de ne pas oublier de faire l'incrÃ©mentation pour augmenter la valeur de la variable !

Si vous hÃ©sitez entre les deux, il suffit simplement de vous poser la question suivante : Â« Est-ce que je sais d'avance combien de fois je veux que mes instructions soient rÃ©pÃ©tÃ©es ? Â».

Si la rÃ©ponse est oui, alors la boucle for  est tout indiquÃ©e.

Sinon, alors il vaut mieux utiliser la boucle while .
Affichez des recettes

Reprenons ce que nous avions dit sur les recettes.

Une recette, c'est :

    un titre ;

    un auteur ;

    un statut activÃ© ;

    et des instructions (la recette Ã  suivre).

Le code de votre application Ã  ce stade pourrait Ãªtre le suivant (avec des recettes d'exemple, bien sÃ»r) :

<?php


// DÃ©claration du tableau des recettes

$recipes = [

    ['Cassoulet','[...]','mickael.andrieu@exemple.com',true,],

    ['Couscous','[...]','mickael.andrieu@exemple.com',false,],

];


?>


<!DOCTYPE html>

<html>

<head>

    <title>Affichage des recettes</title>

</head>

<body>

    <ul>

        <?php for ($lines = 0; $lines <= 1; $lines++): ?>

            <li><?php echo $recipes[$lines][0] . ' (' . $recipes[$lines][2] . ')'; ?></li>

        <?php endfor; ?>

    </ul>

</body>

</html>

Pour le rendu suivant :
Affichage de nos recettes : version 0 !
Affichage de nos recettes : version 0 !

Ah ! En HTML, on peut utiliser la boucle  for  comme une boucle  if  : je reconnais l'astuce avec  endif;  et  endfor;  , c'est bien Ã§a ?

Tout Ã  fait, comme vous pouvez le voir, c'est assez pratique !

On peut combiner les boucles et les conditions ? Au final, on a affichÃ© aussi la recette "Couscous" alors que le statut d'affichage est Ã  "faux"â€¦ 

Oui, mais nous verrons cela dans le prochain chapitre !
En rÃ©sumÃ©

    Les boucles demandent Ã  PHP de rÃ©pÃ©ter des instructions plusieurs fois.

    Les deux principaux types de boucles sont :

        while : Ã  utiliser de prÃ©fÃ©rence lorsqu'on ne sait pas par avance combien de fois la boucle doit Ãªtre rÃ©pÃ©tÃ©e ;

        for  : Ã  utiliser lorsqu'on veut rÃ©pÃ©ter des instructions un nombre prÃ©cis de fois.

    L'incrÃ©mentation est une technique qui consiste Ã  ajouter 1 Ã  la valeur d'une variable. La dÃ©crÃ©mentation retire au contraire 1 Ã  cette variable. On trouve souvent des incrÃ©mentations au sein de boucles for  .
