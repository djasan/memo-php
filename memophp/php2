Un peu plus t√¥t dans ce cours, nous avons d√©couvert le principe de fonctionnement du PHP.

Maintenant, nous allons passer √† la pratique et r√©aliser notre toute premi√®re page web en PHP !

Ne vous attendez pas √† un r√©sultat extraordinaire, mais cela va vous permettre de prendre vos marques. Vous allez en particulier comprendre comment on s√©pare le code HTML classique du code PHP.

Vous √™tes pr√™t ? Allons-y !
Utilisez des balises PHP

Vous savez que le code source d'une page HTML est constitu√© de balises (aussi appel√©es tags, en anglais). Par exemple, <ul>  est une balise.

Le code PHP viendra s'ins√©rer au milieu du code HTML. On va progressivement placer dans nos pages web des morceaux de code PHP √† l'int√©rieur du HTML. Ces bouts de code PHP seront les parties dynamiques de la page, c'est-√†-dire les parties qui peuvent changer toutes seules.

Le code suivant illustre cela :

<!DOCTYPE html>

<html>

    <head>

        <meta charset="utf-8" />

        <title>Ma page web</title>

    </head>

    

    <body>

        <h1>Ma page web</h1>

        

        <p>

            Bonjour <!-- Ins√©rer le pseudo du visiteur ici --> !

        </p>


    </body>

</html>

Comme vous pouvez le voir, on retrouve le code HTML que l'on conna√Æt bien‚Ä¶ et on ins√®re en plus des donn√©es dynamiques au milieu. Ici, par exemple, c'est le pseudonyme : il change en fonction du visiteur.

OpenClassrooms fait la m√™me chose pour ses membres inscrits. Votre pseudonyme est affich√© en haut des pages lorsque vous √™tes connect√©.
Reconnaissez la forme d'une balise PHP

Si je vous parle de cela, ce n'est pas par hasard. Pour utiliser du PHP, on va devoir introduire une nouvelle balise‚Ä¶ et celle-ci est un peu sp√©ciale.

    Elle commence par  <?php 

    Et se termine par?>   

C'est √† l'int√©rieur que l'on mettra du code PHP (ce que je vais vous apprendre tout au long de ce cours).

Voici une balise PHP vide :

<?php ?>

√Ä l'int√©rieur, on √©crira donc du code source PHP :

<?php /* Le code PHP se met ici */ ?>

On peut sans probl√®me √©crire la balise PHP sur plusieurs lignes.

En fait, c'est m√™me indispensable car la plupart du temps, le code PHP fera plusieurs lignes.

Cela donnera quelque chose comme :

<?php

/* Le code PHP se met ici

Et ici

Et encore ici */

?>

Il existe d'autres balises pour utiliser du PHP ; par exemple : 

     <? ?> 

     <% %> 

    <?= ?>

Ne soyez donc pas √©tonn√© si vous en voyez.

N√©anmoins, <?php ?>  est la forme la plus correcte ; vous apprendrez donc √† vous servir de cette balise et non pas des autres.
Ins√©rez une balise PHP au milieu du code HTML

La balise PHP que nous venons de d√©couvrir s'ins√®re au milieu du code HTML, comme je vous l'ai dit plus t√¥t. Pour reprendre l'exemple que l'on a vu au chapitre pr√©c√©dent :

<!DOCTYPE html>

<html>

    <head>

        <title>Ceci est une page de test avec des balises PHP</title>

        <meta charset="utf-8" />

    </head>

    <body>

        <h2>Page de test</h2>

        

        <p>

            Cette page contient du code HTML avec des balises PHP.<br />

            <?php /* Ins√©rer du code PHP ici */ ?>

            Voici quelques petits tests :

        </p>

        

        <ul>

        <li style="color: blue;">Texte en bleu</li>

        <li style="color: red;">Texte en rouge</li>

        <li style="color: green;">Texte en vert</li>

        </ul>

        

        <?php

        /* Encore du PHP

        Toujours du PHP */

        ?>

    </body>

</html>

Peut-on placer une balise PHP n'importe o√π dans le code ?

Oui ! Vraiment n'importe o√π. Pas seulement dans le corps de la page, d'ailleurs : vous pouvez placer une balise PHP dans l'en-t√™te de la page (regardez la ligne 4 de l'exemple ci-dessous).

<!DOCTYPE html>

<html>

    <head>

        <title>Ceci est une page de test <?php /* Code PHP */ ?></title>

        <meta charset="utf-8" />

    </head>

Plus fort encore, vous pouvez m√™me ins√©rer une balise PHP au milieu d'une balise HTML, comme le montre la ligne 5 de l'exemple ci-dessous (bon, ce n'est pas tr√®s joli, je vous l'accorde) :

<!DOCTYPE html>

<html>

    <head>

        <title>Ceci est une page de test</title>

        <meta <?php /* Code PHP */ ?> charset="utf-8" />

    </head>

Comment √ßa fonctionne ? √Ä quoi √ßa peut servir ?

Il faut se rappeler que PHP g√©n√®re du code HTML. Nous allons mieux comprendre le fonctionnement en apprenant √† afficher du texte en PHP.
Affichez du texte

Bon, tout √ßa c'est bien beau, mais il serait temps de commencer √† √©crire du code PHP, non ?

Grande nouvelle : c'est maintenant que vous allez apprendre votre premi√®re instruction en PHP.

Ne vous attendez pas √† quelque chose d'extraordinaire, votre PC ne va pas se mettre √† danser la samba tout seul. üòÑ

Vous allez cependant un peu mieux comprendre comment le PHP fonctionne, c'est-√†-dire comment il g√©n√®re du code HTML. Il est indispensable de bien comprendre cela ; soyez donc attentif !
Utilisez l'instruction echo

Le PHP est un langage de programmation, ce qui n'√©tait pas le cas du HTML. Dans ce cours, nous partons de z√©ro et donc je vais supposer que vous n'avez jamais fait de programmation auparavant.

Tout langage de programmation contient ce qu'on appelle des instructions. On en √©crit une par ligne en g√©n√©ral, et en PHP elles se terminent toutes par un point-virgule. Une instruction commande √† l'ordinateur d'effectuer une action pr√©cise.

Ici, la premi√®re instruction que nous allons d√©couvrir permet d'ins√©rer du texte dans la page web. Il s'agit de l'instruction echo, la plus simple et la plus basique de toutes les instructions que vous devez conna√Ætre.

Voici un exemple d'utilisation de cette instruction :

<?php echo "Ceci est du texte"; ?>


<!-- Ou bien, avec des parenth√®ses -->

<?php echo("Ceci est du texte"); ?>

Comme vous le voyez, √† l'int√©rieur de la balise PHP on √©crit l'instruction echo  suivie du texte √† afficher entre guillemets. Les guillemets permettent de d√©limiter le d√©but et la fin du texte, ce qui aide l'ordinateur √† se rep√©rer.

L'instruction se termine par un point-virgule comme je vous l'avais annonc√©, ce qui signifie "Fin de l'instruction".

C'est beaucoup plus rare, mais l'instruction echo peut √™tre entour√©e de parenth√®ses ouvrantes et fermantes : nous reviendrons l√†-dessus dans le chapitre sur les fonctions.

Notez qu'il existe une instruction identique √† echo  appel√©e print  , qui fait la m√™me chose.

Cependant, echo est plus couramment utilis√©e.

Il faut savoir qu'on a aussi le droit de demander d'afficher des balises. Par exemple, le code suivant fonctionne :

<?php echo "Ceci est du <strong>texte</strong>"; ?>

Le mot ¬´ texte ¬ª sera affich√© en gras gr√¢ce √† la pr√©sence des balises <strong>  et </strong>  .

Comment faire pour afficher un guillemet ?

Bonne question.

Si vous mettez un guillemet, √ßa veut dire pour l'ordinateur que le texte √† afficher s'arr√™te l√†. Vous risquez au mieux de faire planter votre beau code et d'avoir une terrible ¬´ Parse error ¬ª.

La solution consiste √† faire pr√©c√©der le guillemet d'un antislash  \  :

<?php echo "Cette ligne a √©t√© √©crite \"uniquement\" en PHP."; ?>

Vous savez que le code PHP s'ins√®re au milieu du code HTML. Alors allons-y, prenons une page basique en HTML et pla√ßons-y du code PHP (ligne 12).

<!DOCTYPE html>

<html>

    <head>

        <title>Notre premi√®re instruction : echo</title>

        <meta charset="utf-8" />

    </head>

    <body>

        <h2>Affichage de texte avec PHP</h2>

        

        <p>

            Cette ligne a √©t√© √©crite enti√®rement en HTML.<br />

            <?php echo("Celle-ci a √©t√© √©crite enti√®rement en PHP."); ?>

        </p>

    </body>

</html>

Je vous propose de copier-coller ce code source dans votre √©diteur de texte (Visual Studio Code ou autre... ) et d'enregistrer la page. Nous allons l'essayer et voir ce qu'elle produit comme r√©sultat.

Mais au fait, comment on fait d√©j√† pour enregistrer une page PHP ?
Enregistrez une page PHP

Enregistrez la page avec l'extension .php  . Par exemple : affichertexte.php  , dans le dossier tests que je vous ai fait cr√©er.

Il doit se trouver :

    dans C:\MAMP\www\tests sous Windows,

    ou  /Applications/MAMP/www/tests sous Mac.

Quel que soit votre syst√®me d'exploitation, l'essentiel est que le fichier soit enregistr√© dans le dossier www si vous utilisez MAMP ou WAMP (ou un de ses sous-dossiers) ; sinon le fichier PHP ne pourra pas s'ex√©cuter !

Une fois la page enregistr√©e, il faut maintenant la tester.
Testez la page PHP

Pour tester votre page PHP, tout d√©pend de votre syst√®me d'exploitation, mais la man≈ìuvre est la m√™me dans les grandes lignes.

    D√©marrez MAMP (ou XAMPP) si ce n'est pas d√©j√† fait.

    Allez √† l'adresse http://localhost/tests ou http://localhost:8888/tests (selon votre configuration). Une page web s'ouvre, indiquant tous les fichiers qui se trouvent dans le dossier tests  . Vous devriez avoir le fichier  affichertexte.php  .

    Cliquez dessus : votre ordinateur g√©n√®re alors le code PHP puis ouvre la page. Vous avez le r√©sultat devant vos yeux √©bahis. üëÄ

Le m√™me r√©sultat peut √™tre obtenu dans votre navigateur, en allant directement √† l'adresse suivante : http://localhost/tests/affichertexte.php.

La m√©thode devrait √™tre quasiment la m√™me, que vous soyez sous Windows, Mac OS X ou Linux.

Si vous utilisez le serveur local de PHP, vous pouvez sauvegarder le fichier o√π vous le souhaitez, mais en contrepartie vous devez toujours d√©marrer le serveur au niveau d'un dossier contenant le fichier √† ex√©cuter.

Alors, que voyez-vous ?

Je pense que vous √™tes √©tonn√© et surpris de ce que je vous ai fait faire : √ßa a l'air d'√™tre inutile, et ce n'est pas tout √† fait faux‚Ä¶

Le code PHP a ¬´ √©crit ¬ª une ligne √† l'√©cran, tout simplement.

Mais‚Ä¶ ce n'est pas plus simple de l'√©crire en HTML, finalement ?

Si ! Mais vous verrez bient√¥t l'int√©r√™t de cette fonction. Pour le moment, on constate juste que √ßa √©crit du texte. ü§ì

En attendant, pour vous amuser et comprendre la force de PHP, essayez juste le code suivant (qu'on expliquera plus tard dans le cours) :

<!DOCTYPE html>

<html>

    <head>

        <meta charset="utf-8" />

        <title>Ma page web</title>

    </head>

    <body>

        <h1>Ma page web</h1>

        <p>Aujourd'hui nous sommes le <?php echo date('d/m/Y h:i:s'); ?>.</p>

    </body>

</html>

Testez ce code et admirez : la date et l'heure s'affichent automatiquement sur la page web !

Attendez quelques minutes, puis actualisez la page : l'heure s'est mise √† jour toute seule !

Regardez le code source de la page g√©n√©r√©e dans le navigateur : vous verrez qu'il n'y a pas de code PHP et que l'heure a directement √©t√© envoy√©e dans le code HTML apr√®s ex√©cution du code PHP par le serveur.
Commentez votre code

Avant de terminer ce chapitre, je tiens √† vous parler de quelque chose qui √† mes yeux a une tr√®s grande importance quand on d√©veloppe des programmes : les commentaires.

Un commentaire est un texte que l'on √©crit pour soi (ou pour d'autres d√©veloppeurs qui vont travailler dessus) dans le code PHP.

Ce texte est ignor√©, c'est-√†-dire qu'il dispara√Æt compl√®tement lors de la g√©n√©ration de la page. Il n'y a que vous qui voyez ce texte.

Mais alors, √† quoi sert un commentaire ?

Cela permet de vous y retrouver dans votre code PHP, parce que si vous n'y touchez pas pendant des semaines et que vous y revenez, vous risquez d'√™tre un peu perdu.

Vous pouvez √©crire tout et n'importe quoi, le tout est de s'en servir √† bon escient.

Il existe deux types de commentaire :

    Les commentaires monolignes.

    Les commentaires multilignes.

Tout d√©pend de la longueur de votre commentaire. Je vais vous pr√©senter les deux.
Faites des commentaires monolignes

Pour indiquer que vous √©crivez un commentaire sur une seule ligne, vous devez taper deux slashs : ¬´ //  ¬ª. Tapez ensuite votre commentaire.
Un exemple ?

<?php

echo "J'habite en Chine."; // Cette ligne indique o√π j'habite


// La ligne suivante indique mon √¢ge

echo "J'ai 92 ans.";

?>

Je vous ai mis deux commentaires √† des endroits diff√©rents :

    le premier est √† la fin d'une ligne ;

    le second est sur toute une ligne.

√Ä vous de voir o√π vous placez vos commentaires : si vous commentez une ligne pr√©cise, mieux vaut mettre le commentaire √† la fin de cette ligne.
Faites des commentaires multilignes

Ce sont les plus pratiques si vous pensez √©crire un commentaire sur plusieurs lignes, mais on peut aussi s'en servir pour √©crire des commentaires d'une seule ligne. Il faut commencer par √©crire /*  puis refermer par */  :

<?php

/* La ligne suivante indique mon √¢ge

Si vous ne me croyez pas...

... vous avez raison ;o) */

echo "J'ai 92 ans.";

?>

Ici, les commentaires n'ont pas grande utilit√©, mais vous verrez de quelle fa√ßon je les utilise dans les prochains chapitres pour vous d√©crire le code PHP.
En r√©sum√©

    Les pages web contenant du PHP ont l'extension .php 

    Une page PHP est une simple page HTML qui contient des instructions en langage PHP.

    Les instructions PHP sont plac√©es dans une balise ouvrante et fermante : <?php ?>  

    Pour afficher du texte en PHP, on utilise l'instruction echo  

    Il est possible d'ajouter des commentaires en PHP pour d√©crire le fonctionnement du code. On utilise pour cela les symboles // ou /* */  
