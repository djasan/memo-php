Bienvenue dans la partie 2 de ce cours, nous passons aux choses s√©rieuses ! Nous d√©marrons le projet fil rouge pour d√©velopper notre site web dynamique : un site de partage de recettes de cuisine. Et √ßa commence par une notion fondamentale : les variables.

Les variables sont indispensables √† tout langage de programmation, et en PHP on n'y √©chappe pas.

Pour pouvoir d√©velopper notre projet de partage, nous allons avoir besoin de structurer votre application autour d'objets qui la composent. C'est ce qu'on appelle des objets "m√©tiers".

Pour un site de partage de recettes de cuisine, c'est simple :

    Des utilisateurs se connectent : ils ont un nom, un e-mail, un mot de passe, un √¢ge...

    Ils consultent ou cr√©ent des recettes : elles ont un titre, un corps (la recette), un statut d'activation...

    Et ainsi de suite pour chacun des objets qui constituent votre projet.

OK je vois, mais concr√®tement, qu'est-ce que c'est, une "variable" ?

J'y arrive‚Ä¶
Comprenez ce qu'est une variable

Rien qu'avec leur nom, vous devez vous dire que c'est quelque chose qui change tout le temps.

En effet, le propre d'une variable c'est de pouvoir varier.

Une variable, c'est une petite information stock√©e en m√©moire temporairement.

En PHP, la variable (l'information) existe tant que la page est en cours de g√©n√©ration. D√®s que la page PHP est g√©n√©r√©e, toutes les variables sont supprim√©es de la m√©moire car elles ne servent plus √† rien.

Ce n'est donc pas un fichier qui reste stock√© sur le disque dur, mais une petite information temporaire pr√©sente en m√©moire vive.

C'est √† vous de cr√©er des variables. Vous en cr√©ez quand vous en avez besoin pour retenir des informations.
Donnez toujours un nom et une valeur aux variables

Une variable est toujours constitu√©e de deux √©l√©ments :

    son nom : pour pouvoir la reconna√Ætre, vous devez donner un nom √† votre variable. Par exemple age  ;

    sa valeur : c'est l'information qu'elle contient, et qui peut changer. Par exemple :  17  .

Ici, je vous ai donn√© l'exemple d'une variable appel√©e age  qui a pour valeur  17  .

On peut modifier quand on veut la valeur de cette variable, faire des op√©rations dessus, etc. Et quand on en a besoin, on l'appelle (par son nom), et elle nous dit gentiment la valeur qu'elle contient.

Maintenant que vous comprenez √ßa, allons plus loin : il existe diff√©rents types de variables.
D√©couvrez les diff√©rents types de variables

Les variables sont capables de stocker diff√©rents types d'informations. On parle de types de donn√©es. Voici les principaux types √† conna√Ætre.

    Les cha√Ænes de caract√®res (string) : c'est le nom informatique qu'on donne au texte. 

    Les nombres entiers (int) : ce sont les nombres du type 1, 2, 3, 4, etc. On compte aussi parmi eux les entiers relatifs : -1, -2, -3‚Ä¶

    Les nombres d√©cimaux (float ) : ce sont les nombres √† virgule, comme 14,738. Attention, les nombres doivent √™tre √©crits avec un point au lieu de la virgule (c'est la notation anglaise).

    Les bool√©ens (bool ) : c'est un type tr√®s important qui permet de stocker soit vrai soit faux. 

    Rien (NULL ) : aussi bizarre que cela puisse para√Ætre, on a parfois besoin de dire qu'une variable ne contient rien. Ce n'est pas vraiment un type de donn√©es, mais plut√¥t l'absence de type.

Cela devrait vous donner une id√©e de tout ce que PHP est capable de stocker en m√©moire. Ces types suffiront pour la cr√©ation de notre site !

Maintenant, allons-y !

OK mais comment cr√©er une variable et comment afficher ce qu'elle contient ?

C'est justement ce que j'allais vous expliquer. üòé
Affectez une valeur √† une variable

Regardez ce code d'exemple :

<?php

$userAge = 17;

?>

Avec ce code PHP, on vient en fait de cr√©er une variable :

    son nom est userAge  ;

    sa valeur est 17  .

Notez qu'on ne peut pas mettre d'espace dans un nom de variable. On utilise donc une majuscule pour "d√©tacher" visuellement les mots et les rendre plus lisibles.

C'est ce que l'on appelle la convention camelCase (cela fait r√©f√©rence aux bosses d'un chameau).

Quand vous nommez des variables, √©vitez les accents, les c√©dilles et tout autre symbole : PHP ne les appr√©cie pas trop‚Ä¶

C'est pour cela que j'ai √©crit age et non  √¢ge  .

Analysons dans le d√©tail le code qu'on vient de voir.

    D'abord, on √©crit le symbole "dollar" ($) : il pr√©c√®de toujours le nom d'une variable. C'est comme un signe de reconnaissance, si vous pr√©f√©rez : √ßa permet de dire √† PHP "J'utilise une variable". 

    Ensuite, il y a le signe "√©gal" (= ) : celui-l√†, c'est logique, c'est pour dire que  $userAge  est √©gal √†‚Ä¶

    √Ä la suite, il y a la valeur de la variable, ici 17.

    Enfin, il y a l'incontournable point-virgule ( ;) qui permet de terminer l'instruction.

OK super, mais concr√®tement, qu'est-ce que le code pr√©c√©dent afficherait ?

Rien du tout !

Rien ne s'affiche tant que vous n'utilisez pas  echo  .

L√†, le serveur a juste cr√©√© la variable temporairement en m√©moire, mais il n'a rien fait d'autre.

Supposons maintenant que l'on √©crive ceci :

<?php

$userAge = 17; // La variable est cr√©√©e et vaut 17

$userAge = 23; // La variable est modifi√©e et vaut 23

$userAge = 55; // La variable est modifi√©e et vaut 55

?>

Que se passera-t-il ?

La variable $userAge  va √™tre cr√©√©e et prendre pour valeur, dans l'ordre : 17, 23, puis 55.

Tout cela va tr√®s vite : l'ordinateur √©tant tr√®s rapide, vous n'aurez pas le temps de dire ¬´ ouf ¬ª que tout ce code PHP aura √©t√© ex√©cut√©.

Comme tout √† l'heure, rien ne s'affiche. Seulement, quelque part dans la m√©moire de l'ordinateur, une petite zone nomm√©e userAge vient de prendre la valeur 17, puis 23, puis 55.
Utilisez les types de donn√©es

Vous vous souvenez des types de donn√©es dont je vous ai parl√© il y a quelques minutes ? Lesstring , int , float ...

Voici un exemple de variable pour chacun de ces types.
Le type string  (cha√Æne de caract√®res)

Ce type permet de stocker du texte.

Pour cela, vous devez entourer votre texte de :

    guillemets doubles  ""  ;

    ou de guillemets simples ''  (attention, ce sont des apostrophes).

Par exemple, pour conserver en m√©moire les noms et mails de nos utilisateurs :

<?php

$fullname = "Mathieu Nebra";

$email = 'mathieu.nebra@exemple.com';

?>

Attention, petit pi√®ge : si vous voulez ins√©rer un guillemet simple alors que le texte est entour√© de guillemets simples, il faut l'√©chapper en ins√©rant un antislash devant. Il en va de m√™me pour les guillemets doubles.

Voici un exemple pour bien comprendre :

<?php

$variable = "Mon \"nom\" est Mathieu";

$variable = 'Je m\'appelle Mathieu';

?>

En effet, si vous oubliez de mettre un antislash, PHP va croire que c'est la fin de la cha√Æne et il ne comprendra pas le texte qui suivra (et vous aurez en fait un message Parse error).

Vous pouvez en revanche ins√©rer sans probl√®me des guillemets simples au milieu de guillemets doubles, et inversement :

<?php

$variable = 'Mon "nom" est Mathieu';

$variable = "Je m'appelle Mathieu";

?>

La diff√©rence est subtile, faites attention. Il y a d'ailleurs une diff√©rence plus importante entre les deux types de guillemets, dont nous parlerons plus loin.
Le type int  (nombre entier)

Il suffit tout simplement d'√©crire le nombre que vous voulez stocker, sans guillemets :

<?php

$userAge = 17;

?>

Le type float  (nombre d√©cimal)

Vous devez √©crire votre nombre avec un point au lieu d'une virgule. C'est la notation anglaise.

<?php

$price = 57.3;

?>

Le type bool  (bool√©en)

Pour dire si une variable vaut vrai ou faux, vous devez √©crire le mot true  ou false  sans guillemets autour (ce n'est pas une cha√Æne de caract√®res !) :

<?php

$isAuthor = true;

$isAdministrator = false;

?>

Une variable vide avec NULL

Si vous voulez cr√©er une variable qui ne contient rien, vous devez lui passer le mot-cl√© NULL  (vous pouvez aussi l'√©crire en minuscules :  null  ).

<?php

$noValue = NULL;

?>

Cela sert simplement √† indiquer que la variable ne contient rien, tout du moins pour le moment.

Bon, nous avons appris √† cr√©er des variables et √† stocker des informations √† l'int√©rieur. Mais pour le moment, aucun de nos codes sources n'affiche quoi que ce soit.

Voyons donc comment faire.
Affichez le contenu d'une variable

Vous vous souvenez que l'on peut afficher du texte avec echo  ?

On peut aussi s'en servir pour afficher la valeur d'une variable !

<?php

$fullname = 'Mathieu Nebra';

echo $fullname;

?>

Comme vous le voyez, il suffit d'√©crire le nom de la variable que vous voulez afficher.

Au fait, on ne doit pas mettre de guillemets apr√®s le echo, comme tu nous as appris ?

Non, quand il s'agit d'une variable, on ne met pas de guillemets autour.

Cr√©ez un fichier PHP avec ce code source pour le tester. Inutile de mettre tout le code HTML autour, ce n'est pas grave, ce ne sera pas une ¬´ vraie ¬ª page HTML valide ; mais c'est bien suffisant pour nos tests.

Le contenu qui se trouve √† l'int√©rieur de la variable s'affiche dans la page (ici, Mathieu Nebra).
Concat√©nez une variable

Non, ce n'est pas une insulte. Cela signifie assemblage. ;-)

En fait, √©crire "Mathieu Nebra" tout seul comme on l'a fait n'est pas tr√®s parlant. On aimerait √©crire du texte autour pour dire : ¬´ Bienvenue Mathieu Nebra ¬ª. La concat√©nation est justement un moyen d'assembler du texte et des variables.

Comment faire cela ?

Les petits malins auront l'id√©e d'√©crire trois instructions echo  :

<?php

$fullname = "Mathieu Nebra";

echo "Bonjour ";

echo $fullname;

echo " et bienvenue sur le site !";

?>

Vous pouvez tester et v√©rifier dans votre navigateur que √ßa fonctionne.

Mais il y a plus malin : on peut tout faire sur une ligne.

Pour cela, il y a deux m√©thodes :

    Avec des guillemets simples.

    Ou avec guillemets doubles.

Et c'est l√† qu'on va voir, qu'entre les deux, il y a une diff√©rence !
Concat√©nez avec des guillemets doubles

Avec des guillemets doubles, c'est le plus simple. Vous pouvez √©crire le nom de la variable au milieu du texte et il sera remplac√© par sa valeur.

Concr√®tement, essayez ce code :

<?php

$fullname = "Mathieu Nebra";

echo "Bonjour $fullname et bienvenue sur le site !";

?>

√áa affiche :  Bonjour Mathieu Nebra et bienvenue sur le site !  

En effet, lorsque vous utilisez des guillemets doubles, les variables qui se trouvent √† l'int√©rieur sont analys√©es et remplac√©es par leur vraie valeur.

√áa a le m√©rite d'√™tre une solution facile √† utiliser, mais je vous recommande plut√¥t celle des guillemets simples, que nous allons voir d√®s √† pr√©sent.
Concat√©nez avec des guillemets simples

Si vous √©crivez le code pr√©c√©dent entre guillemets simples, vous allez avoir une dr√¥le de surprise :

<?php

$fullname = 'Mathieu Nebra';

echo 'Bonjour $fullname et bienvenue sur le site !'; // ERREUR !

?>

√áa affiche :  Bonjour $fullname et bienvenue sur le site !   .

Mis√©ricorde ! On ne peut pas concat√©ner du texte avec des guillemets simples ?

Eh bien si ! Mais cette fois, il va falloir √©crire la variable en dehors des guillemets et s√©parer les √©l√©ments les uns des autres √† l'aide d'un point. Regardez :

<?php

$fullname = 'Mathieu Nebra';

echo 'Bonjour ' . $fullname . ' et bienvenue sur le site !'; // OK

?>

Cette fois, √ßa affiche bien comme on voulait.

√áa a l'air bien plus compliqu√©, mais en fait c'est cette m√©thode qu'utilisent la plupart des programmeurs exp√©riment√©s en PHP. En effet, le code est plus lisible, et on rep√®re bien la variable, alors que tout √† l'heure elle √©tait comme ¬´ noy√©e ¬ª dans le texte. D'autre part, votre √©diteur de texte devrait vous colorer la variable, ce qu'il ne faisait pas pour le code pr√©c√©dent.

Il faut noter aussi que cette m√©thode d'√©criture est un chou√Øa plus rapide, car PHP voit de suite o√π se trouve la variable et n'a pas besoin de la chercher au milieu du texte.

Dor√©navant, j'√©crirai toutes mes cha√Ænes de caract√®res entre guillemets simples (√† de rares exceptions pr√®s), et j'utiliserai la seconde m√©thode de concat√©nation qu'on vient de voir.
Faites des calculs simples

On va maintenant faire travailler votre ordinateur, et vous allez voir qu'il encaisse les calculs sans broncher. Eh oui, PHP sait aussi faire des calculs !
Oh je vous rassure : on ne va pas faire des calculs tordus, juste des additions, des soustractions, des multiplications et des divisions. C'est du niveau de tout le monde, non ? üò¨üòÑ

Ici, comme vous vous en doutez, on ne va travailler que sur des variables qui contiennent des nombres.
Les op√©rations de base : addition, soustraction‚Ä¶

Les signes √† conna√Ætre pour faire les quatre op√©rations de base (vous les trouverez sur votre pav√© num√©rique, √† droite du clavier, en principe) sont repr√©sent√©s par le tableau suivant. En compl√©ment vous avez l'op√©ration modulo, c'est-√†-dire le reste d'une division euclidienne.

Symbole
	

Signification

+
	

Addition

-
	

Soustraction

*
	

Multiplication

/
	

Division

%
	

Modulo

Apr√®s, pour vous en servir, √ßa coule de source. Voici quelques exemples :

<?php

$number = 2 + 4; // $number prend la valeur 6

$number = 5 - 1; // $number prend la valeur 4

$number = 3 * 5; // $number prend la valeur 15

$number = 10 / 2; // $number prend la valeur 5


// Allez on rajoute un peu de difficult√©

$number = 3 * 5 + 1; // $number prend la valeur 16

$number = (1 + 2) * 2; // $number prend la valeur 6

?>

Allez quoi, boudez pas, un peu de calcul mental √ßa n'a jamais fait de mal √† personne.
V√©rifiez mes calculs : comme vous pouvez le voir il n'y a rien de bien compliqu√© dans tout √ßa.

Seulement, il ne faut pas avoir peur de ¬´ jongler ¬ª avec les variables.
Voici des calculs avec plusieurs variables :

<?php

$number = 10;

$result = ($number + 5) * $number; // $result prend la valeur 150

?>

C'est de la pure logique, je ne peux rien vous dire de plus.
Si vous avez compris ces bouts de code, vous avez tout compris.
Le modulo

Il est possible de faire un autre type d'op√©ration un peu moins connu : le modulo. Cela repr√©sente le reste de la division enti√®re.

Par exemple, 6 / 3 = 2 et il n'y a pas de reste. En revanche, 7 / 3 = 2 (car le nombre 3 ¬´ rentre ¬ª 2 fois dans le nombre 7) et il reste 1. Vous avez fait ce type de calculs √† l'√©cole primaire, souvenez-vous !

Le modulo permet justement de r√©cup√©rer ce reste :

<?php

$number = 10 % 5; // $number prend la valeur 0 car la division tombe juste

$number = 10 % 3; // $number prend la valeur 1 car il reste 1

?>

OK g√©nial, et les autres op√©rations ?

Je passe sous silence les op√©rations plus complexes telles que :

    la racine carr√©e ;

    l'exponentielle ;

    la factorielle ;

    etc.

Toutes ces op√©rations peuvent √™tre r√©alis√©es en PHP mais il faudra passer par ce qu'on appelle des fonctions, une notion que l'on d√©couvrira plus tard. Les op√©rations basiques que l'on vient de voir sont amplement suffisantes pour la programmation PHP de tous les jours.
En r√©sum√©

    Une variable est une petite information qui reste stock√©e en m√©moire le temps de la g√©n√©ration de la page PHP. Elle a un nom et une valeur.

    Il existe plusieurs types de variables qui permettent de stocker diff√©rents types d'informations : du texte ( string  ), des nombres entiers ( int  ), des nombres d√©cimaux (float), des bool√©ens pour stocker vrai ou faux ( bool  ), etc.

    En PHP, un nom de variable commence par le symbole dollar : $age  , par exemple.

    La valeur d'une variable peut √™tre affich√©e avec l'instruction echo  .

    Il est possible de faire des calculs math√©matiques entre plusieurs variables : addition, soustraction, multiplication‚Ä¶
