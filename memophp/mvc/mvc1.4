Notre code est maintenant d√©coup√© en 3 fichiers :

    Un pour le traitement PHP : il r√©cup√®re les donn√©es de la base. On l'appelle le mod√®le.

    Un pour l'affichage : il affiche les informations dans une page HTML. On l'appelle la vue.

    Un pour faire le lien entre les deux : on l'appelle le contr√¥leur.

Cette structure est bonne, mais nous allons faire quelques am√©liorations cosm√©tiques. Ce ne sont peut-√™tre que des d√©tails pour vous, mais √ßa fera une vraie diff√©rence √† la fin.

Voici ce que nous allons am√©liorer :

    l'anglais ;

    la balise de fermeture PHP ;

    l'utilisation de short open tags.

Je vous pr√©sente le code am√©lior√©. Nous le commenterons un peu ensuite.
D√©couvrez le code am√©lior√©
index.php

<?php


require('src/model.php');


$posts = getPosts();


require('templates/homepage.php');

Vous constaterez que j'ai enlev√© la balise de fermeture?>√† la fin du fichier. Plus fou encore, je vais vous dire que c'est... une am√©lioration.

Les d√©veloppeurs professionnels enl√®vent en effet la balise de fermeture PHP dans les pages qui ne contiennent que du PHP. Sans rentrer dans les d√©tails, √ßa permet d'√©viter que ces fichiers n'envoient par erreur du code HTML sous forme d'espaces blancs alors qu'ils ne devraient pas. Faites-moi confiance et retirez ce?>si votre fichier ne contient que du PHP. Et si vous ne me faites pas confiance, lisez la recommandation officielle appel√©e PSR-12 qui dit :

    The closing ?> tag MUST be omitted from files containing only PHP.

Rassurez-vous, PHP sait que la balise se ferme √† la fin du fichier (il n'y a pas le choix de toute fa√ßon !).
src/model.php

<?php


function getPosts() {

    // We connect to the database.

    try {

        $database = new PDO('mysql:host=localhost;dbname=blog;charset=utf8', 'blog', 'password');

    } catch(Exception $e) {

        die('Erreur : '.$e->getMessage());

    }


    // We retrieve the 5 last blog posts.

    $statement = $database->query(

        "SELECT id, title, content, DATE_FORMAT(creation_date, '%d/%m/%Y √† %Hh%imin%ss') AS french_creation_date FROM posts ORDER BY creation_date DESC LIMIT 0, 5"

    );

    $posts = [];

    while (($row = $statement->fetch())) {

        $post = [

            'title' => $row['title'],

            'french_creation_date' => $row['french_creation_date'],

            'content' => $row['content'],

        ];


        $posts[] = $post;

    }


    return $posts;

}

Dans le mod√®le, les requ√™tes se font depuis une base de donn√©es en anglais (j'ai renomm√© les noms des champs en base).

N'ayez pas peur d'utiliser de l'anglais, m√™me si vous le parlez mal. En programmation, √©crire en mauvais anglais est pr√©f√©rable √† √©crire en bon fran√ßais (!).
templates/homepage.php

<!DOCTYPE html>

<html>

    <head>

        <meta charset="utf-8" />

        <title>Le blog de l'AVBN</title>

        <link href="style.css" rel="stylesheet" />

    </head>


    <body>

        <h1>Le super blog de l'AVBN !</h1>

        <p>Derniers billets du blog :</p>


        <?php

        foreach ($posts as $post) {

        ?>

            <div class="news">

                <h3>

                    <?= htmlspecialchars($post['title']); ?>

                    <em>le <?= $post['french_creation_date']; ?></em>

                </h3>

                <p>

                    <?= nl2br(htmlspecialchars($post['content'])); ?>

                    <br />

                    <em><a href="#">Commentaires</a></em>

                </p>

            </div>

        <?php

        }

        ?>

    </body>

</html>

Ce n'est pas obligatoire, mais j'en profite pour faire d√©couvrir les short echo tags. C'est un raccourci en PHP pour faciliter la lisibilit√© du code. Ainsi, par exemple :

<?php echo htmlspecialchars($post['title']); ?>

... est devenu :

<?= htmlspecialchars($post['title']) ?>

Cela permet d'√©viter d'avoir √† √©crireecho  quand on souhaite juste afficher une variable. Le but est d'√™tre plus lisible dans la vue en enlevant le maximum de code PHP l√†-dedans (m√™me si on ne peut pas tout enlever).

Les frameworks PHP tels que Symfony ont carr√©ment d√©velopp√© un langage de template (appel√© Twig pour Symfony), qui permet de ne pas utiliser du tout de code PHP dans notre affichage.
La base de donn√©es

Pour avoir du code uniquement en anglais, j'ai d√ª renommer ma base de donn√©es en anglais. Pour l'instant, nous avons une seule table  posts  qui doit repr√©senter les posts de blog.
La structure de notre base de donn√©es : une table... en anglais !
La structure de notre base de donn√©es : une table... en anglais !

Il y a 4 champs, nomm√©s en anglais :

    id  (integer)

    title  (varchar)

    content  (text)

    creation_date  (datetime)

Cette table vous prendra 30 secondes √† cr√©er maximum. üòâ

Sachez que vous pouvez aussi renommer votre table et ses champs depuis phpMyAdmin, pour ne pas avoir √† en cr√©er une nouvelle.

Pour les utilisateurs du d√©p√¥t Git du projet, vous pouvez partir du fichier  db.sql pr√©sent √† la racine. Modifiez le nom de la table et ceux des champs, nettoyez votre base de donn√©es et rejouez-le simplement.
R√©capitulons en vid√©o
Exercez-vous

Vous pensez avoir retenu ces quelques finitions ? Il est temps de refaire les modifications par vous-m√™me.

T√©l√©chargez le zip du code sur le Github.

R√©cup√©rez le commit Git √† l'√©tiquettesoignez-cosmetique, aussi disponible via ce lien Github, et bon travail !
En r√©sum√©

    Il est recommand√© de garder uniquement la balise ouvrante<?php  dans les fichiers qui contiennent seulement du PHP. Ceux qui contiennent aussi du HTML ne changent pas.

    La syntaxe des "short open tags" peut √™tre utilis√©e pour avoir des gabarits d'affichage plus concis.

    En tant que d√©veloppeur PHP, vous √™tes aussi responsable de la bonne gestion de la base de donn√©es. Vous pouvez la traiter comme votre code : des noms clairs, de l'anglais‚Ä¶
