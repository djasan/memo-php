Pour l'instant, 2 fichiers permettent d'acc√©der aux pages de notre site. Ce sont les 2 contr√¥leurs :

    index.php: accueil du site, liste des derniers billets ;

    post.php: affichage d'un billet et de ses commentaires.

Si on continue comme √ßa, on va avoir une quantit√© faramineuse de fichiers √† la racine de notre d√©p√¥t de code :contact.php,editComment.php‚Ä¶

Et alors, c'est mal ?

Eh bien, disons que √ßa fonctionnerait. Mais ce n'est pas parce que √ßa fonctionnerait que ce serait forc√©ment l'id√©al.

Plus vous ajouterez de fonctionnalit√©s sur le blog, plus le nombre de fichiers va augmenter. √áa deviendra tr√®s difficile pour l'√©quipe de d√©veloppeurs de s'y retrouver quand une modification sera demand√©e.

En plus de √ßa, on a souvent besoin d'ex√©cuter du code en amont des contr√¥leurs :

    pour monitorer ce qui se passe sur votre site ;

    pour g√©rer les sessions utilisateurs ;

    ou encore du code "outillage", pour simplifier l'acc√®s au contenu des requ√™tes HTTP.

Quand vous voudrez mettre en place ou modifier ces points, il faudra que vous passiez sur chacun des fichiers contr√¥leurs. Quelle gal√®re !
Appr√©hendez la nouvelle structure des fichiers

Pour faciliter la maintenance, il est plus simple de passer par un contr√¥leur frontal, qui va jouer le r√¥le de routeur. Son objectif va √™tre d'appeler le bon contr√¥leur (on dit qu'il route les requ√™tes).
Le routeur appelle le bon contr√¥leur, qui appelle le mod√®le puis la vue.
Le routeur

On va travailler ici sur deux sections de code bien distinctes :

    index.php: ce sera le nom de notre routeur. Le routeur √©tant le premier fichier qu'on appelle en g√©n√©ral sur un site, c'est normal de le faire dansindex.php. Il va se charger d'appeler le bon contr√¥leur.

    src/controllers/: ce dossier contiendra nos contr√¥leurs dans des fonctions. On va y regrouper nos anciensindex.phpetpost.php.

Chaque contr√¥leur a le droit √† son propre fichier. C'est une unit√© de code qui a une taille souvent suffisamment grande pour ne pas devoir la m√©langer avec d'autres.

On va faire passer un param√®treactiondans l'URL de notre routeurindex.phppour savoir quelle page on veut appeler. Par exemple :

    index.php: va afficher la page d'accueil avec la liste des billets ;

    index.php?action=post: va afficher un billet et ses commentaires.

Certains trouvent que l'URL n'est plus tr√®s jolie sous cette forme. Peut-√™tre pr√©f√©reriez-vous voirmonsite.com/postplut√¥t queindex.php?action=post.

Heureusement, cela peut se r√©gler avec un m√©canisme de r√©√©criture d'URL (URL rewriting). On ne l'abordera pas ici, car √ßa se fait dans la configuration du serveur web (Apache), mais vous pouvez vous renseigner sur le sujet si vous voulez !
Cr√©ez les contr√¥leurs

Commen√ßons par notre dossiercontrollers/. On va y cr√©er nos contr√¥leurs, un par fichier :

<?php

// controllers/homepage.php


require_once('src/model.php');


function homepage() {

    $posts = getPosts();


    require('templates/homepage.php');

}

<?php

// controllers/post.php


require_once('src/model.php');


function post(string $identifier)

{

    $post = getPost($identifier);

    $comments = getComments($identifier);


    require('templates/post.php');

}

On a apport√© deux changements majeurs :

    Nos contr√¥leurs sont plac√©s dans des fonctions. Chaque fichier devient du type "biblioth√®que de code" et ne fait plus rien par lui-m√™me. Il va simplement fournir √† notre routeur un point d'acc√®s pour lancer notre code.

    Notre fichier src/model.phpest inclus avec require_once. C'est une fonction tr√®s semblable √†require, mais qui v√©rifie d'abord si le fichier a d√©j√† √©t√© inclus ! √âtant donn√© quesrc/model.phpest aussi un fichier de type "biblioth√®que de code", on souhaite qu'il ne soit inclus qu'une seule fois. Sans √ßa, l'inclusion de nos deux contr√¥leurs va d√©clencher une double inclusion de notre mod√®le et donc un plantage de PHP.

Les plus attentifs auront aussi not√© qu'on a simplifi√© le contr√¥leurpost, en lui enlevant la responsabilit√© de chercher lui-m√™me l'identifiant du billet dans la requ√™te ! On pr√©f√®re d√©placer ce travail sur notre routeur. Chaque contr√¥leur (et donc chaque nouvelle fonctionnalit√© m√©tier) sera ainsi plus facile √† d√©velopper.
Cr√©ez le routeur index.php

Int√©ressons-nous maintenant √† notre routeurindex.php:

<?php


require_once('src/controllers/homepage.php');

require_once('src/controllers/post.php');


if (isset($_GET['action']) && $_GET['action'] !== '') {

    if ($_GET['action'] === 'post') {

        if (isset($_GET['id']) && $_GET['id'] > 0) {

            $identifier = $_GET['id'];


            post($identifier);

        } else {

            echo 'Erreur : aucun identifiant de billet envoy√©';


            die;

        }

    } else {

        echo "Erreur 404 : la page que vous recherchez n'existe pas.";

    }

} else {

    homepage();

}

 Il a l'air un peu compliqu√© parce qu'on y fait pas mal de tests, mais le principe est tout simple : appeler le bon contr√¥leur. √áa donne :

    On charge nos fichiers de contr√¥leurssrc/controllers/homepage.phpetsrc/controllers/post.php(pour que les fonctions soient en m√©moire, quand m√™me !).

    On teste le param√®treactionpour savoir quel contr√¥leur appeler. Si le param√®tre n'est pas pr√©sent, on charge le contr√¥leur de la page d'accueil contenant la liste des derniers billets (ligne 21).

    On teste les diff√©rentes valeurs possibles pour notre param√®treactionet on redirige vers le bon contr√¥leur √† chaque fois.

Voil√† qui commence √† prendre forme ! üòÅ
Exercez-vous

Il nous reste une petite modification √† faire pour que notre blog soit de nouveau utilisable. Vous avez devin√© ?

Eh oui, on a chang√© les URL auxquelles r√©pondait notre application, mais on n'est pas encore repass√© sur les liens de l'interface !

Je vous encourage √† essayer d'apporter cette modification par vous-m√™me. √áa vous permettra de v√©rifier que vous ma√Ætrisez votre nouveau syst√®me de routage.

Le zip vous est disponible sur le Github. L'√©tiquette Git pour cette √©tape estcreez-routeur. Le code est visible sur Github √† cette adresse.
R√©capitulons en vid√©o

Au final, on a apport√© ensemble un bon nombre de changements. On a cr√©√© un dossier, d√©plac√© du code entre plusieurs fichiers, supprim√© d'anciens fichiers... Voici un screencast pour faire le point !
En r√©sum√©

    Le routeur est un composant du code qui a pour r√¥le de recevoir toutes les requ√™tes de l'application et de router chacune vers le bon contr√¥leur.

    On pr√©f√®re cr√©er un fichier par contr√¥leur, tous rassembl√©s dans un m√™me dossier. √Ä l'int√©rieur, chaque fichier d√©finit une fonction, qui sera appel√©e par le routeur.

    Quand on fonctionne avec des fichiers PHP de type "biblioth√®que de code", il faut utiliserrequire_oncepour √©viter des plantages.
