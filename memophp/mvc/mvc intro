Tr√®s souvent, j'entends des d√©butants me dire :

    "O√π doit-on aller apr√®s avoir suivi ton cours sur PHP ?"

    "Comment est-ce que je fais pour avoir une structure propre pour mon code, comme les pros ?"

Bonne nouvelle, ce cours va vous apporter la r√©ponse √† cette grande question. Pas toute la r√©ponse bien s√ªr, car on n'a jamais fini d'apprendre... Mais au moins un bon d√©but de r√©ponse.

Durant tout ce cours, on va suivre ensemble un projet fil rouge : c'est votre premi√®re semaine dans une agence de d√©veloppement, o√π vous venez d'√™tre accept√© en stage.

F√©licitations !

Votre chef de projet vous confie d'embl√©e une mission. Il va falloir reprendre le blog de l'Association de Volley-Ball de Nuelly, l'AVBN. √Ä l'√©poque, il avait √©t√© fait par un d√©veloppeur amateur, mais maintenant que le club vient de monter de division, il leur faut un outil un peu plus robuste.

Vous ne savez pas par quoi commencer ? Pas d'inqui√©tude, je vais vous accompagner tout au long de ce projet pour accomplir votre mission : professionnaliser le code de ce blog avec l‚Äôarchitecture MVC.
Professionnalisez votre code

Qu'est-ce qui fait qu'un code est "professionnel" ?  ü§î

Contrairement √† ce qu'on pourrait croire, ce n'est pas parce qu'un code "marche" qu'il est "professionnel".

Voici quelques caract√©ristiques d'un code professionnel que l'on entend souvent :

    Il est modulaire : g√©n√©ralement d√©coup√© en de nombreux fichiers, o√π chaque fichier a un r√¥le et un seul √† la fois.

    Il est d√©coupl√© : les fichiers sont con√ßus pour fonctionner ind√©pendamment les uns des autres.

    Il est document√© : la documentation prend g√©n√©ralement la forme de commentaires sp√©ciaux plac√©s au-dessus des m√©thodes et classes publiques, pouvant √™tre r√©utilis√©es dans d'autres projets (renseignez-vous sur la PHPdoc). On peut g√©n√©rer automatiquement une page web de documentation √† partir de ces commentaires.

    Il est en anglais : c'est la langue des d√©veloppeurs et d√©veloppeuses partout sur la plan√®te. Les variables et les noms des fonctions sont en anglais et peuvent √™tre compris par tous.

    Il est clair : et pour √ßa, il respecte tr√®s souvent les normes de formatage. En PHP, la plupart des d√©veloppeurs recommandent de suivre la PSR-12. Je vous conseille d'y jeter un ≈ìil, si vous √™tes curieux. Dans tous les cas, on commencera √† se l'imposer d√®s nos premi√®res lignes de code dans ce cours !

Les professionnels disent d'ailleurs qu'un code qui n√©cessite beaucoup de commentaires est un code trop complexe. Un code bien √©crit contient des commentaires qui expliquent le pourquoi, pas le comment.

Ce genre de code a de nombreux avantages :

    Il est r√©utilisable : si un jour nous avons cod√© un fichier utile, nous pouvons nous en resservir dans un autre projet ou dans un autre endroit du m√™me projet. On gagne du temps en n'ayant pas √† tout refaire √† chaque fois !

    Il est facile d'y travailler √† plusieurs : chaque fichier √©tant ind√©pendant (et g√©n√©ralement de petite taille), on peut travailler en √©quipe de 5, 10, voire 100 personnes sur un m√™me projet. Si tout √©tait m√©lang√© dans un seul et m√™me gros fichier, il serait impossible de le modifier en m√™me temps !

    Il est √©volutif : quand quelqu'un vient vous demander une nouvelle fonctionnalit√©, il est facile de l'ajouter. Vous n'avez pas peur de tout casser, car vous avez m√™me la possibilit√© de cr√©er des tests automatis√©s. Vous savez que √ßa va marcher et votre code ne sera pas plus compliqu√©.

Le dernier point (un code √©volutif) est tr√®s important. Si on demande √† un d√©veloppeur exp√©riment√© chez OpenClassrooms :

"Qu'est-ce qu'un bon code ?"

Celui-ci vous r√©pondra en g√©n√©ral :

"C'est un code qui est apte au changement."

En r√©sum√©, on peut donc gagner du temps, travailler √† plusieurs et ajouter des fonctionnalit√©s facilement sans (presque) jamais causer des bugs. √áa fait envie, non ?

Eh bien c'est possible ! Il y a de nombreuses techniques de professionnels pour y arriver. Ce cours va vous en donner un certain nombre. √âvidemment, il va vous falloir pratiquer en parall√®le pour bien comprendre ! üòä
D√©couvrez les √©tapes pour devenir un pro

Prenons un instant un peu de recul. J'estime que pour se professionnaliser, il faut passer par 3 √©tapes :

    √âcrire ses premi√®res lignes de code PHP, faire en sorte que "√ßa marche". Gr√¢ce au cours
    Concevez votre site web avec PHP et MySQL, normalement c'est bon.

    Structurer son code de fa√ßon modulaire, pour qu'on puisse l'am√©liorer facilement et travailler dessus √† plusieurs. On ne va pas ajouter de nouvelles fonctionnalit√©s, mais on va les coder "mieux".

    Utiliser ensuite un framework PHP (ex : Symfony) comme base pour un projet. Le framework automatise la plupart des choses que nous aurons construites "√† la main" dans ce cours, pour vous permettre d'aller plus vite et de ne pas r√©inventer la roue √† chaque fois.
    Lisez : D√©veloppez votre site web avec le framework Symfony

En th√©orie, vous pourriez donc sauter cette √©tape 2 (ce cours) et apprendre directement √† utiliser un framework comme Symfony. Cependant, j'estime que la marche est trop haute pour un d√©butant. Elle ne permet pas d'appr√©cier l'int√©r√™t du framework.

Les frameworks seront toujours mieux faits que votre code √† la main. Cependant, apprendre √† faire les choses √† la main a du bon ! √áa vous permettra de comprendre pourquoi on a cr√©√© des frameworks... et vous ne serez pas perdus dans leur architecture.
