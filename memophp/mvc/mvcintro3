l y a eu de nombreuses modifications au chapitre pr√©c√©dent. Vous pouvez toujours repartir du zip, t√©l√©chargeable depuis le Github, ou de l'√©tiquettecreez-template-page(accessible sur Github) si vous n'√™tes pas certain de vos modifications !

Essayons maintenant d'am√©liorer nos vues. Il y a du code qui se r√©p√®te et, comme vous le savez, le code qui se r√©p√®te... on n'aime pas √ßa !
Incluez des blocs de page

La premi√®re approche, que vous connaissez s√ªrement, consiste √† cr√©er des blocs de page dans des fichiers PHP diff√©rents. Par exemple :

    header.php

    footer.php

Avec √ßa, nos vues n'auraient plus qu'√† inclure (avec unincludeou unrequire) le header et le footer :

<?php require('header.php'); ?>

<h1>Le super blog de l'AVBN !</h1>

<p>Contenu de la page</p>

<?php require('footer.php'); ?>

Alors oui, √ßa marche, mais il y a moyen de faire mieux et plus flexible. En effet, imaginez que le menu change un peu en fonction des pages par exemple. Comment vous faites, si ce menu se trouve dansheader.php?

Ou le titre de la page dans la balise<title>? Vous n'y avez pas acc√®s pour le personnaliser en fonction des pages ! A priori, tout √ßa est dansheader.php‚Ä¶ que vous ne pouvez pas changer d'ici.

Pour √™tre plus flexible, il faut... inverser compl√®tement notre approche. üôÉ
Cr√©ez un layout

On va cr√©er un layout (une disposition, traduit litt√©ralement) de page. On va y retrouver toute la structure de la page, avec des "trous" √† remplir.

Attention √† ne pas faire l'amalgame entre layout et template ! Un layout est une fa√ßon sp√©cifique d'utiliser un template. Il sert √† cr√©er une disposition d'affichage. Dans un fichier layout, les "trous" √† remplir seront tr√®s souvent combl√©s... par des templates !

Voici notre fichiertemplates/layout.php:

<!DOCTYPE html>

<html>

   <head>

      <meta charset="utf-8" />

      <title><?= $title ?></title>

      <link href="style.css" rel="stylesheet" /> 

   </head>


   <body>

      <?= $content ?>

   </body>

</html>

Il y a 2 "trous" √† remplir dans ce layout : le<title>et le contenu de la page.

√âvidemment, on pourrait faire plus compliqu√© si on voulait (par exemple, on pourrait r√©server un espace pour personnaliser le menu). Mais vous voyez l'id√©e : vous cr√©ez la structure de votre page et vous remplissez les trous par des variables.

Il faut maintenant d√©finir ce qu'on met dans ces variables. Voici comment on peut le faire dans la vuetemplates/homepage.phpqui affiche la liste des derniers billets :

<?php $title = "Le blog de l'AVBN"; ?>


<?php ob_start(); ?>

<h1>Le super blog de l'AVBN !</h1>

<p>Derniers billets du blog :</p>


<?php

foreach ($posts as $post) {

?>

    <div class="news">

        <h3>

            <?= htmlspecialchars($post['title']); ?>

            <em>le <?= $post['french_creation_date']; ?></em>

        </h3>

        <p>

            <?= nl2br(htmlspecialchars($post['content'])); ?>

            <br />

            <em><a href="post.php?id=<?= urlencode($post['identifier']) ?>">Commentaires</a></em>

        </p>

    </div>

<?php

}

?>

<?php $content = ob_get_clean(); ?>


<?php require('layout.php') ?>

Ce code fait 3 choses :

    Il d√©finit le titre de la page dans$title. Celui-ci sera int√©gr√© dans la balise<title>dans le template.

    Il d√©finit le contenu de la page dans$content. Il sera int√©gr√© dans la balise<body>du template.
    Comme ce contenu est un peu gros, on utilise une astuce pour le mettre dans une variable. On appelle la fonctionob_start()(ligne 3) qui "m√©morise" toute la sortie HTML qui suit. Puis, √† la fin, on r√©cup√®re le contenu g√©n√©r√© avecob_get_clean()(ligne 28) et on met le tout dans$content.

    Enfin, il appelle le template avec un `require`. Celui-ci va r√©cup√©rer les variables$titleet$contentqu'on vient de cr√©er... pour afficher la page !

√Ä part l'astuce duob_start()etob_get_clean()(qui nous sert juste √† mettre facilement beaucoup de code HTML dans une variable), le principe est simple. En inversant l'approche, on a un code bien plus flexible pour d√©finir des "morceaux" de page dans des variables.
R√©capitulons en vid√©o

Je reprends ces quelques notions dans ce screencast. Si vous n'√™tes pas s√ªr de bien comprendre l'utilisation deob_start(), c'est pour vous !
En r√©sum√©

    Un syst√®me de templates est un syst√®me o√π des morceaux de vue sont param√©trables.

    On peut utiliser un template de "mise en page", appel√© layout, pour factoriser le code HTML redondant.

    Les fonctionsob_start()etob_get_clean()ne sont pas n√©cessaires, mais aident √† impl√©menter un syst√®me de templates.
