On commence √† avoir un sacr√© nombre de fichiers entre tous nos dossiers !
Nous avons deux fichiers pour homepage et post entre les dossiers controllers et templates.
Nos fichiers, un peu organis√©s, mais qui se reproduisent √† grande vitesse

Si on continue √† ajouter des pages, on va se retrouver avec de nouveaux contr√¥leurs, de nouvelles vues... √ßa va vite devenir compliqu√© de s'y retrouver ! Il nous faut des moyens d'organiser notre code √† volont√©.

Il est temps que je commence √† vous briefer sur nos futurs rangements ! üóÇ
Identifiez le m√©tier

J'ai visit√© un site la derni√®re fois, il y avait au moins 200 pages diff√©rentes. √áa veut dire qu'on va avoir 200 fichiers dans notre dossier de contr√¥leurs ? ü§î

Vous commencez √† vous poser de bonnes questions, j'aime √ßa ! üòÅ

Bien s√ªr que non, on ne va pas laisser √ßa se produire. Ce serait invivable ‚Äì et je vous parle d'exp√©rience... Il va falloir qu'on apprenne √† diviser notre code selon le m√©tier.

Hum, ce n'est pas la premi√®re fois que vous nous parlez de m√©tier. "Logique m√©tier", "code m√©tier"... Mais qu'est-ce que vous entendez par ce mot pr√©cis√©ment ?

Je vais essayer de vous donner une d√©finition simplifi√©e avec une comparaison : le m√©tier, c'est toute la partie de votre projet qui n'est pas la technique. Oui, c'est vaste ! √áa laisse encore du flou, mais c'est d√©j√† pas mal.

Passons par deux exemples :

    Une connexion √† une base de donn√©es MySQL, c'est une notion technique. Il n'y a que le d√©veloppeur qui la ma√Ætrise. C'est d'ailleurs lui (ou l'architecte avant lui), qui fait le choix de la mettre en place. Et souvent, si vous en parlez √† votre client, √ßa risque d'√™tre du charabia pour lui.

    Afficher des commentaires sous un billet de blog, de l'autre c√¥t√©, c'est une notion m√©tier. La plupart du temps, c'est le client qui introduit ce type de notion dans le projet.

Chaque notion m√©tier est bien souvent support√©e par plusieurs notions techniques. Rien que pour mettre en ligne une page qui afficherait Hello, world!  (une demande m√©tier, donc), on a besoin d'Apache, de PHP, de HTML... Tout √ßa, ce sont des notions techniques. Vous commencez √† comprendre la diff√©rence ?
Regroupez par sections du site

Eh bien, pour pouvoir segmenter votre code √† l'infini, sachez que les professionnels recommandent en g√©n√©ral de le segmenter selon des sections du m√©tier. Finis, les dossiers qui contiennent toutes vos requ√™tes SQL !

Et bonus pour vous, il vous suffira d'√©couter votre interlocuteur pour d√©finir votre segmentation ! Projetez-vous un instant dans cette demande du client :

> Bonjour,
Pourriez-vous nous ajouter, s'il vous pla√Æt, une page affichant un formulaire de contact sur le front ?
Nous nous tenons disponible pour en discuter plus en d√©tail.

Pour information, on appelle front, ou "front-office", toute la partie d'un site auquel a acc√®s l'utilisateur final. √Ä l'oppos√© du back, ou "back-office", accessible seulement aux administrateurs du site.

O√π est-ce que vous placeriez votre contr√¥leur ? Je vous laisse r√©fl√©chir quelques secondes...

Ma proposition, dans ce cas, serait de le mettre danssrc/controllers/(on garde bien s√ªr notre architecture MVC). Puis, √† l'int√©rieur de ce dossier, je le placerais dans un fichierfront/contact.php: dans la section front, un formulaire de contact. Au total :src/controllers/front/contact.php. Le plus dur est finalement de correctement traduire vers de l'anglais ! üòÅ

En fait, pour organiser ses demandes, le client a d√©j√† con√ßu une segmentation m√©tier. Parfois elle est un peu floue et il faut que vous la pr√©cisiez. Parfois elle est tr√®s claire et il ne reste qu'√† traduire. Ce qui est s√ªr, c'est que quand surgira la prochaine demande de modification, le client utilisera les m√™mes mots pour d√©crire ce qu'il veut. Vous n'aurez qu'√† les suivre pour retrouver le code responsable de la fonctionnalit√© !

Bien re√ßu pour les contr√¥leurs. Mais on fait quoi de nos mod√®les et de nos vues ?

Eh bien, on va pouvoir utiliser exactement la m√™me typologie de segmentation ! Pas obligatoirement la m√™me arborescence, parce que parfois une arborescence de contr√¥leurs est plus simple qu'une arborescence de vue ou de mod√®le. Ou l'inverse. Mais elles se ressembleront fortement.

Dans notre cas, je proposerais de cr√©er les fichiers suivants :

    templates/front/contact.php: notre vue, qui est directement li√©e √† notre contr√¥leur et qui a exactement la m√™me arborescence.

    src/model/contact.php: notre mod√®le qui sera responsable de sauvegarder les donn√©es de contact dans ma base de donn√©es, puis de les lire depuis celle-ci. La notion de contact est globale √† notre blog (on aura sans doute une section "back-office" pour les traiter). La segmentationfrontn'ayant donc pas de sens ici, on ne met pas le dossierfront/dans le chemin complet de ce fichier.

Il y a toujours des tas de possibilit√©s pour segmenter son m√©tier. Faites de votre mieux pour √©couter le client, mais faites surtout de votre mieux. Je vous parle de mes propositions √† chaque fois, parce qu'une solution diff√©rente pourrait √™tre encore plus pertinente pour votre √©quipe.
On peut m√™me parler de "sensibilit√©" pour ce genre de prises de d√©cisions. Vous avez toute votre vie de d√©veloppeur pour √©voluer l√†-dessus !
En r√©sum√©

    Les notions m√©tier, ce sont les notions qui ne sont pas techniques. C'est ce dont parle votre client.

    En analysant la segmentation du m√©tier faite par notre client, on est capable de l'utiliser pour regrouper les morceaux de code qui vont ensemble. On peut ainsi s'y retrouver beaucoup plus facilement par la suite.

    Une segmentation m√©tier est, par nature, tr√®s subjective et toujours sujette aux changements. N'ayez pas peur d'essayer, et de r√©affiner plus tard. Il n'y a jamais une seule bonne r√©ponse.
