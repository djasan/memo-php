Allez plus loin

Il faut savoir s'arr√™ter √† un moment donn√©... et je crois que ce moment est venu !

On pourrait encore passer des heures et des heures √† optimiser notre code, √† l'affiner... mais nous finirions par recr√©er un framework nous-m√™mes ! Or, si les frameworks ont √©t√© invent√©s, c'est bien pour une raison : ils nous permettent de ne pas avoir √† r√©inventer la roue !

Pourquoi nous avoir fait cr√©er un site en MVC √† la main si les frameworks existent ?

Parce que j'avais besoin que vous compreniez ce qui a amen√© les d√©veloppeurs √† cr√©er des frameworks. Ils se sont pos√© exactement les m√™mes questions que vous (ce ne sont pas des extraterrestres !). Ils ont donc beaucoup r√©fl√©chi pour chercher des solutions afin que leur code reste propre.

Voici quelques conseils si vous voulez aller plus loin.
Autoloadez !

Je vous l'avais promis, je vais vous parler d'une solution pour ne plus avoir √† utiliser desrequire_onceen plus des espaces de nom. C'est le but du syst√®me autoload fourni par PHP.

Concr√®tement, l'autoload est un m√©canisme qui va √™tre appel√© √† chaque fois que vous pointez sur un nom tir√© d'un namespace. Pour chaque nom complet point√© (une classe, par exemple), un fichier PHP va √™tre "automatiquement charg√©". Et la chose fantastique, c'est que cette association entre "espace de nom" et "fichier √† inclure" est enti√®rement personnalisable !

Vous pouvez donc configurer un autoload qui va automatiquement charger toutes les classes du namespaceApplication\Model\Comment\depuis le fichiersrc/model/comment.php. Et faire de m√™me pour le reste de votre mod√®le. Et pour vos contr√¥leurs.

Bien s√ªr, si on fait comme √ßa, c'est fastidieux. Puissant, certes, mais vraiment fastidieux. Et c'est pour √ßa que la plupart des d√©veloppeurs PHP utilisent une convention pour cr√©er leurs classes et leurs fichiers : la PSR-4. Pour la r√©sumer :

    Une classe doit √™tre pr√©sente par fichier.

    Le nom du fichier doit correspondre au nom de la classe (avec les majuscules).

    On a le droit √† un pr√©fixe personnalis√©, qui correspondra √† un dossier personnalis√©.

Je vous recommande donc vivement de coder avec ces contraintes !

Quant √† l'activation de l'autoload dans votre code... Il faut savoir que sur la plupart des projets sur lesquels vous travaillerez, les d√©veloppeurs utilisent un gestionnaire de d√©pendances, appel√© Composer. Il sert √† inclure dans votre projet du code qui n'est pas maintenu par vous. C'est extr√™mement puissant. Eh bien, ce gestionnaire de d√©pendances est capable de g√©n√©rer automatiquement un fichier PHP qui configure l'autoload. Il ne vous restera qu'√† l'inclure en t√™te de votreindex.php:

<?php


require __DIR__ . '/vendor/autoload.php';

Facile !
Documentez !

Les codes professionnels sont souvent bien document√©s.

Enfin... document√©s oui, mais pas n'importe comment ! Il existe des conventions de documentation. En PHP, on commente dans le format PHPDoc.

La PHPDoc est inspir√©e de la Javadoc, qui a √©t√© invent√©e pour le langage Java.

√Ä l'aide d'un programme sp√©cial (PHPDoc), on peut g√©n√©rer automatiquement une documentation depuis votre code :
Une documentation PHPDoc automatiquement g√©n√©r√©e depuis les commentaires du code
Une documentation PHPDoc automatiquement g√©n√©r√©e depuis les commentaires du code

Ce type de documentation peut se r√©v√©ler tr√®s utile pour les d√©veloppeurs qui ont besoin de comprendre comment votre code source fonctionne dans les grandes lignes.

Pour obtenir ce r√©sultat, les variables et fonctions membres des objets sont pr√©c√©d√©s d'un commentaire qui suit une convention bien particuli√®re :

<?php


/**

* Executes a compiler pass.

*

* This method will execute the business logic associated with a given compiler pass and allow it to manipulate

* or consumer the Object Graph using the ProjectDescriptor object.

*

* @param ProjectDescriptor $project Representation of the Object Graph that can be manipulated.

*

* @return mixed

*/

public function execute(ProjectDescriptor $project)

{

   // ...

}

Alors oui, √ßa fait pas mal de commentaires dans le code, mais √ßa a un double avantage :

    Le r√¥le du code est expliqu√© quand vous √™tes en train de lire le fichier source.

    Vous pouvez g√©n√©rer une documentation en HTML √† partir de √ßa (comme on l'a vu sur la capture au-dessus).

Cela nous permet d'expliquer notamment √† quoi sert la fonction membre, quels param√®tres elle prend en entr√©e et quelle valeur elle est cens√©e retourner.
Apprenez-en plus sur la programmation orient√©e objet

La programmation orient√©e objet est un domaine tr√®s vaste. Nous n'avons fait qu'effleurer la surface des possibilit√©s.

Si un peu de th√©orie ne vous fait pas peur, je ne saurais trop vous recommander de lire le cours Programmez en orient√© objet en PHP sur OpenClassrooms. Il contient de nombreux concepts qui vous seront utiles !
Ne sortez pas un tank pour tuer une mouche

En g√©n√©ral, l'int√©r√™t d'un code propre se voit quand vous commencez √† travailler sur un gros projet. Sur un tout petit projet, il n'est pas forc√©ment n√©cessaire de sortir l'artillerie lourde...
D√©veloppeur sortant l'artillerie lourde pour un tout petit probl√®me
D√©veloppeur sortant l'artillerie lourde pour un tout petit probl√®me

Gardez donc en t√™te qu'il faut faire l'√©quilibre entre un beau code optimis√© (qu'on met des heures √† cr√©er) et un code un peu moche (mais qui marche tout de suite). Ne soyez pas dans les extr√™mes : ne cherchez pas non plus √† tout optimiser √† l'infini, au risque de passer trop de temps sur la beaut√© de votre code plut√¥t qu'√† r√©ellement cr√©er des fonctionnalit√©s utiles.

Le plus grand ennemi des faux-d√©butants que vous √™tes maintenant n'est pas le code sale (√ßa, c'est le truc des d√©butants). Non, votre plus grand ennemi s'appelle l'optimisation pr√©matur√©e. √áa veut dire vouloir √† tout prix faire m√©ga-propre quand √ßa n'est pas n√©cessaire.

Un bon d√©veloppeur sait au contraire quand optimiser et quand ne pas optimiser. Il s'autorise m√™me volontairement √† laisser un peu de dette technique (un code non optimis√©) pour pouvoir avancer plus vite. Ensuite, par contre, quand le besoin s'en fait ressentir, il n'h√©site pas √† revenir en arri√®re pour refactoriser son code afin qu'il soit plus optimis√©.

Bref, comme souvent dans la vie : il faut rester √©quilibr√©. üòä
Utilisez un framework

Ce sera s√ªrement la prochaine √©tape pour vous. Les frameworks sont des super-biblioth√®ques qui contiennent tout le code qui vous permet d'√©viter de r√©inventer la roue.

Les frameworks vous imposent souvent une fa√ßon de coder bien pr√©cise (notamment du MVC, de la POO, etc.). Il faut du temps pour apprendre √† les utiliser correctement, mais vous gagnerez ensuite beaucoup de temps et aurez un code tr√®s propre.

Il existe plusieurs frameworks PHP. Citons notamment :

    Zend Framework : le framework cr√©√© par la soci√©t√© qui a con√ßu PHP (Zend). Il a un peu moins le vent en poupe aujourd'hui m√™me s'il reste connu.

    Symfony : un des frameworks les plus connus, d√©velopp√© par des Fran√ßais. üêì Il existe le cours Construisez un site web √† l'aide du framework Symfony 5 sur OpenClassrooms.

    Laravel : un autre framework PHP tr√®s connu.

Astuce ! Si vous voulez voir 2 d√©veloppeurs se battre entre eux, demandez-leur quel est le meilleur framework. Amusement garanti ! üçø

OpenClassrooms utilise Symfony de son c√¥t√©. N'h√©sitez pas √† aller consulter le cours sur Symfony apr√®s avoir fini ce cours !
En r√©sum√©

    La Programmation Orient√©e Objet va beaucoup, beaucoup plus loin que ce qui est dit dans ce cours.

    Documenter son code est une excellente pratique dans le monde professionnel. Il y a des outils pour √ßa, notamment la PHPDoc.

    L'autoloading est une fonctionnalit√© de PHP qui permet de faire automatiquement lesrequire_onced√®s que les namespaces sont utilis√©s. Pour en profiter, la plupart des codes source PHP respectent la PSR-4, une convention de nommage de classes et de fichiers.

    Tous les outils ne sont pas utiles sur tous les projets. Il faut passer suffisamment de temps √† bien concevoir son code, mais ne pas optimiser pr√©matur√©ment non plus.

    Les frameworks sont des outils qui mettent √† disposition des biblioth√®ques de code et des pratiques pour aider les d√©veloppeurs √† am√©liorer leur productivit√©. Il est recommand√© d'avoir un certain niveau d'expertise sur les frameworks majeurs.
