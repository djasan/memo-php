Alors comme √ßa, votre script ne marche pas ? Et PHP vous affiche des erreurs incompr√©hensibles ?

Pas de souci √† vous faire, c'est tout √† fait normal, on ne r√©ussit jamais un script du premier coup‚Ä¶ en tout cas, moi, jamais !

Des milliers de messages d'erreur diff√©rents peuvent survenir.

OK, jusque-l√† rien de tr√®s rassurant. Et je n'ai pas vraiment la possibilit√© de vous en dresser une liste compl√®te‚Ä¶ mais je peux vous pr√©senter les erreurs les plus courantes, ce qui devrait r√©soudre la grande majorit√© de vos probl√®mes. üòÖ

Allons-y !
Pr√©parez-vous √† faire ces erreurs courantes

Je pense qu'il est facile de parler d'erreurs ¬´ courantes ¬ª, car vous verrez que certaines erreurs reviennent plus souvent que d'autres.

Nous allons passer en revue les erreurs suivantes :

    "Parse error".

    "Undefined function".

    "Wrong parameter count".

"Parse error" = si vous formulez mal une instruction

Si on devait dire qu'il existe UNE erreur de base, √ßa serait tr√®s certainement celle-l√†. Impossible de programmer en PHP sans y avoir droit un jour.

Le message d'erreur que vous obtenez ressemble √† celui-ci :

Parse error: syntax error in error.php on line 7

Ce message vous indique une erreur dans error .php √† la ligne 7.

G√©n√©ralement, cela veut dire que votre probl√®me se situe √† la ligne 7, mais ce n'est pas toujours le cas (trop facile, sinon). Parfois, c'est la ligne pr√©c√©dente qui a un probl√®me : pensez donc √† regarder autour de la ligne indiqu√©e.

Avec un √©diteur de texte sp√©cialis√© comme Visual Studio Code, vous pouvez voir les num√©ros de ligne.
Capture d'√©cran qui montre la num√©rotation des lignes dans Sublime Text
Num√©rotation des lignes dans Visual Studio Code

Bon, mais concr√®tement, qu'est-ce qu'une parse error ?

Une "parse error" est en fait une instruction PHP mal form√©e. Il peut y avoir plusieurs causes :

Oublier le point-virgule √† la fin de l'instruction.

Comme toutes les instructions doivent se terminer par un point-virgule, si vous oubliez d'en mettre un, √ßa provoquera une parse error. Par exemple :

$id_news = 5

‚Ä¶ g√©n√®rera une parse error. Si vous mettez le point-virgule √† la fin, tout rentrera dans l'ordre !

$id_news = 5;

Oublier de fermer un guillemet (une apostrophe ou une parenth√®se).

Par exemple :

echo "Bonjour !;

Il suffit de fermer correctement les guillemets et vous n'aurez plus de probl√®me :

echo "Bonjour !";

Se tromper dans la concat√©nation et oublier un point.

echo "J'ai " . $age " ans";

Une fois l'erreur corrig√©e, √ßa donne :

echo "J'ai " . $age . " ans";

Mal fermer une accolade.

Cela peut √™tre le cas pour une structure en if  , par exemple.

V√©rifiez que vous avez correctement ferm√© toutes vos accolades.

Si vous oubliez d'en fermer une, il est probable que la parse error vous indique que l'erreur se trouve √† la derni√®re ligne du fichier (c'est-√†-dire √† la ligne 115 si votre fichier comporte 115 lignes).

Donc, si on vous indique une erreur √† la derni√®re ligne, il va probablement falloir relire tout le fichier PHP √† la recherche d'une accolade mal ferm√©e !

Si on vous dit que l'erreur est √† la ligne 15 et que vous ne voyez vraiment pas d'erreur √† cette ligne, n'h√©sitez pas √† chercher l'erreur √† la ligne juste au-dessus, elle s'y trouve peut-√™tre !
"Undefined function" = si vous utilisez une fonction non reconnue

Une autre erreur assez classique, c'est la fonction inconnue.

Vous obtenez ce message d'erreur :

Fatal Error: Call to undefined function: is_valid_recipe() in fichier.php on line 27

L√†, il faut comprendre que vous avez utilis√© une fonction qui n'existe pas.

Deux possibilit√©s :

    Soit la fonction n'existe vraiment pas. Vous avez probablement fait une faute de frappe, v√©rifiez si une fonction √† l'orthographe similaire existe.

    Soit la fonction existe vraiment, mais PHP ne la reconna√Æt pas. C'est parce que cette fonction se trouve dans une extension de PHP que vous n'avez pas activ√©e. Par exemple, si vous essayez d'utiliser la fonction imagepng alors que vous n'avez pas activ√© la biblioth√®que n√©cessaire pour les images en PHP, on vous dira que la fonction n'existe pas. Activez la biblioth√®que qui utilise la fonction, et tout sera r√©gl√©.

Une derni√®re chose : il se peut aussi que vous essayiez d'utiliser une fonction qui n'est pas disponible dans la version de PHP que vous avez. V√©rifiez dans le manuel dans quelles versions de PHP cette fonction est disponible.
"Wrong parameter count" = si vous entrez un nombre incorrect de param√®tres pour une fonction

Si vous utilisez mal une fonction, vous aurez cette erreur :

Warning: Wrong parameter count for fonction() in fichier.php on line 112

Cela signifie que :

    vous avez oubli√© des param√®tres pour la fonction ;

    ou m√™me que vous en avez trop mis.

S'il s'agit d'une fonction fournie par PHP, rendez-vous sur la documentation et consultez le mode d'emploi de la fonction pour savoir combien de param√®tres elle prend, et quels sont ceux qui sont facultatifs.

Par exemple, la fonction fopen requiert au minimum deux param√®tres :

    Le premier pour le nom du fichier √† ouvrir.

    Et le second pour le mode d'ouverture (en lecture seule, √©criture, etc.).

Si vous ne mettez que le nom du fichier √† ouvrir, comme ceci :

$fichier = fopen("fichier.txt");

‚Ä¶ vous aurez l'erreur ¬´ Wrong parameter count ¬ª. Pensez donc √† rajouter le param√®tre qui manque, par exemple comme ceci :

$fichier = fopen("fichier.txt", "r");

D√©couvrez ces erreurs plus rares

Les erreurs PHP sont tr√®s vari√©es. N'esp√©rez donc pas que je vous fasse ici la liste des 3 946 erreurs de PHP, j'en serais incapable (je ne les ai pas encore toutes eues, mais √ßa ne saurait tarder, √† l'allure √† laquelle je vais).

Je vais vous montrer quelques erreurs un peu plus rares que ¬´ parse error ¬ª, mais que vous rencontrerez probablement un jour. Si d√©j√† je peux vous aider pour ces erreurs-l√†, ce sera bien.

Nous allons voir les erreurs :

    "Headers already sent by‚Ä¶".

    "L'image contient des erreurs".

    "Maximum execution time exceeded".

"Headers already sent by‚Ä¶" = si vous √©crivez du code au mauvais endroit

Voil√† une erreur classique quand on travaille avec les sessions ou avec les cookies :

Cannot modify header information - headers already sent by ...

Que doit-on comprendre par l√† ?

Les "headers" sont des informations d'en-t√™te  qui sont envoy√©es avant toute chose au navigateur du visiteur.

Elles permettent de dire :

    "Ce que tu vas recevoir est une page HTML".

    ou

    "Ce que tu vas recevoir est une image PNG", ou encore "Inscris un cookie".

Toutes ces choses-l√† doivent √™tre effectu√©es avant que le moindre code HTML ne soit envoy√©.

En PHP, la fonction qui permet d'envoyer des informations de "headers" s'appelle  header() 

. Il y a d'autres fonctions qui envoient des "headers" toutes seules. C'est le cas de :

     session_start() 

     setcookie()  

Ce que vous devez retenir, c'est que chacune de ces fonctions doit √™tre utilis√©e au tout d√©but de votre code PHP. Il ne faut RIEN mettre avant, sinon √ßa provoquera l'erreur ¬´ Headers already sent by‚Ä¶ ¬ª.

Un exemple de code qui g√©n√®re l'erreur :

<html>

<?php session_start(); ?>

Ici, j'ai eu le malheur de mettre un peu de code HTML avant le session_start() et c'est ce qui a provoqu√© l'erreur.

Mettez le session_start() en tout premier, et vous n'aurez plus de probl√®me :

<?php session_start(); ?>

<html>

"L'image contient des erreurs" = si vous avez fait une erreur d'utilisation de la librairie GD

C'est le navigateur qui vous donne ce message d'erreur, et non pas PHP.

Ce message survient lorsque vous travaillez avec la biblioth√®que GD.

Si vous avez fait une erreur dans votre code (par exemple une banale ¬´ parse error ¬ª), cette erreur sera inscrite dans l'image. Du coup, l'image ne sera pas valide et le navigateur ne pourra pas l'afficher.

Bon, d'accord, l'erreur est dans l'image. Mais comment faire pour faire ¬´ appara√Ætre ¬ª l'erreur ?

Deux possibilit√©s :

    vous pouvez supprimer la ligne suivante dans votre code :

<?php header ("Content-type: image/png"); ?>

L'erreur appara√Ætra √† la place du message ¬´ L'image contient des erreurs ¬ª ;

    vous pouvez aussi afficher le code source de l'image (comme si vous alliez regarder la source HTML de la page, sauf que l√†, il s'agit d'une image).

Dans les deux cas, vous verrez le message d'erreur appara√Ætre. √Ä partir de l√†, il ne vous restera plus qu'√† corriger le bug !
"Maximum execution time exceeded" = si vous avez fait une boucle infinie

√áa, c'est le genre d'erreur qui arrive le plus souvent √† cause d'une boucle infinie !

Fatal error: Maximum execution time exceeded in fichier.php on line 57

Imaginez que vous fassiez une boucle while mais que celle-ci ne s'arr√™te jamais : votre script PHP va tourner en boucle sans jamais s'arr√™ter.

Heureusement, PHP limite le temps d'ex√©cution d'une page PHP √† 30 secondes par d√©faut.

Si une page met plus de 30 secondes √† se g√©n√©rer, PHP arr√™te tout en signalant que c'est trop long. Et il fait bien, parce que sinon cela pourrait ralentir tout le serveur et rendre votre site inaccessible !

Voici un exemple de boucle while qui ne s'arr√™tera jamais :

<?php

$counter = 5;

while ($counter == 5)

{

    echo 'Z√©ro ';

}

?>

Comme vous pouvez le voir, un tel code PHP ne s'arr√™tera jamais parce que $counter vaut toujours 5‚Ä¶

Si vous avez donc l'erreur "Maximum execution time exceeded", il va falloir rep√©rer une boucle qui ne s'arr√™te jamais, car c'est elle qui provoque ce probl√®me.

Rassurez-vous : la limite est fix√©e √† 30 secondes, mais vous n'y serez jamais confront√©. En g√©n√©ral, un serveur met moins de 50 millisecondes √† charger une page PHP. On est tr√®s loin des 30 secondes !
D√©boguez votre premier script

Rien ne vaut la pratique pour mettre en application ce que vous venez d'apprendre ! Je vous propose donc de copier le code ci-dessous et de le corriger :

<?php


$users = [

    [

        'full_name' => 'Micka√´l Andrieu',

        'email' => 'mickael.andrieu@exemple.com'

        'age' => 34,

    ],

    [

        'full_name' => 'Mathieu Nebra',

        'email' => 'mathieu.nebra@exemple.com',

        'age' => 34,

    ],

    [

        'full_name' => 'Laur√®ne Castor',

        'email' => 'laurene.castor@exemple.com',

        'age' => 28,

    ],

];


$recipes = [

    [

        'title' => 'Cassoulet',

        'recipe' => '',

        'author' => 'mickael.andrieu@exemple.com',

        'is_enabled' => true,

    ],

    [

        'title' => 'Couscous',

        'recipe' => '',

        'author' => 'mickael.andrieu@exemple.com',

        'is_enabled' => false,

    ],

    [

        'title' => 'Escalope milanaise',

        'recipe' => '',

        'author' => 'mathieu.nebra@exemple.com',

        'is_enabled' => true,

    ],

    [

        'title' => 'Salade Romaine',

        'recipe' => '',

        'author' => 'laurene.castor@exemple.com',

        'is_enablad' => false,

    ],

];


function display_recipe(array $recipe) : string

{

    $recipe_content = '';


    if ($recipe['is_enabled']) {

        $recipe_content = '<article>';

        $recipe_content .= '<h3>' . $recipe['title'] . '</h3>';

        $recipe_content .= '<div>' . $recipe['recipe'] . '</div>';

        $recipe_content .= '<i>' . $recipe['author'] . '</i>';

        $recipe_content .= '</article>';

    }

    

    return $recipe;

}


function display_author(string $authorEmail, array $users) : string

{

    for ($i = 0; $i < count($users); $i++) {

        $author = $users[$i];

        if ($authorEmail === $author['email']) {

            return $author['full_name'] . '(' . $author['age'] . ' ans)';

        }

    }

}


function get_recipes(array $recipes) : array

{

    $valid_recipes = [];


    foreach($recipes as $recipe) {

        if ($recipe['is_enabled']) {

            $valid_recipes[] = $recipe;

        }

    }


    return $valid_recipes;

}


?>

<!DOCTYPE html>

<html lang="en">

<head>

    <title>Les recettes mais page blanche :(</title>

    <link

        href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" 

        rel="stylesheet"

    >

</head>

<body>

    <div class="container">

        <h1>Liste des recettes</h1>

        <!-- Plus facile √† lire -->

        <?php foreach(get_recipes($recipes) as $recipe) : ?>

            <article>

                <h3><?php echo($recipe['title']); ?></h3>

                <div><?php echo($recipe['recipe']); ?></div>

                <i><?php echo(display_author($recipe['author'], $users)); ?></i>

            </article>

        <?php endforeach ?>

    </div>   

</body>

</html>


Pour rappel :

    Il faut soit mettre ce fichier dans un dossier accessible √† votre serveur, soit ex√©cuter le serveur local de PHP dans le dossier qui contient ce fichier.

    Il faut avoir activ√© le d√©boggage et configur√© la propri√©t√© display_error.

    Il y a plusieurs erreurs √† corriger : allez-y par √©tape, sans paniquer.

Alors, avez-vous fait des erreurs en corrigeant des erreurs ? ü§£

La premi√®re erreur affich√©e par PHP est la suivante :

Parse error: syntax error, unexpected ''age'' (T_CONSTANT_ENCAPSED_STRING), expecting ']' in exemple.php on line 7

Il y a donc une erreur √† la ligne 7, ou autour... vous aurez peut √™tre remarqu√© qu'il manque une virgule en ligne 6 juste apr√®s l'assignation de la propri√©t√© email :

<?php


// avant

[

    'email' => 'mickael.andrieu@exemple.com' // OUPS

    'age' => 34,

]



// apr√®s

[

    'email' => 'mickael.andrieu@exemple.com',

    'age' => 34,

]

La deuxi√®me erreur est plus discr√®te puisque le site a l'air de s'afficher correctement sous vos yeux, mais il y a pourtant un message d'erreur sous le titre principal :

Notice: Undefined index: is_enabled in exemple.php on line 78

L'index ou la cl√© pour le tableau $recipe ne semblent pas d√©finis (bug qui ne serait jamais arriv√© si on avait utilis√© la fonction array_key_exists, d'ailleurs ! ü§ì

Il va nous falloir v√©rifier le tableau des recettes et compl√©ter ou corriger :

<?php


// avant

[

    'title' => 'Salade Romaine',

    'recipe' => '',

    'author' => 'laurene.castor@exemple.com',

    'is_enablad' => false, // OUPS

]


// apr√®s

[

    'title' => 'Salade Romaine',

    'recipe' => '',

    'author' => 'laurene.castor@exemple.com',

    'is_enabled' => false,

]

Il y avait une toute petite coquille : is_enabled avait √©t√© remplac√© par  is_enablad  .

La troisi√®me erreur et derni√®re erreur est beaucoup plus bavarde :

Fatal error: Uncaught TypeError: Return value of display_author() must be of the type string, none returned in exemple.php:71
Stack trace: #0 exemple.php(107): display_author() #1 {main} thrown in exemple.php on line 71

Cette fois, l'erreur provient du retour de la fonction display_author qui doit retourner une cha√Æne de caract√®res (le nom de l'utilisateur) et retourne... rien (None).

Que s'est-il pass√© ?

<?php

function display_author(string $authorEmail, array $users) : string

{

    for ($i = 0; $i < count($users); $i++) {

        $author = $users[$i];

        if ($authorEmail === $author['email']) {

            return $author['full_name'] . '(' . $author['age'] . ' ans)';

        }

    }

}

Si l'on consid√®re le code de la fonction, on peut noter que si l'e-mail est trouv√©, alors le nom et l'√¢ge de l'utilisateur sont retourn√©s.

Mais si l'e-mail n'est pas trouv√© ? 

Eh bien, il ne se passe rien car le cas n'a pas √©t√© pr√©vu. Vous avez deux options pour tenter de  corriger ce probl√®me :

    Retourner une cha√Æne de caract√®res m√™me si le mail n'est pas trouv√© ("utilisateur inconnu").

    V√©rifier la liste des e-mails utilisateur et recette : si √ßa se trouve, il y a une coquille dans l'un des e-mails...
